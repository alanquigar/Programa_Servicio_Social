{
  "version": 3,
  "sources": ["../../../../node_modules/@apollo/src/link/utils/fromError.ts", "../../../../node_modules/@apollo/src/link/utils/toPromise.ts", "../../../../node_modules/@apollo/src/link/utils/fromPromise.ts", "../../../../node_modules/@apollo/src/link/utils/throwServerError.ts", "../../../../node_modules/@apollo/src/link/utils/validateOperation.ts", "../../../../node_modules/@apollo/src/link/utils/createOperation.ts", "../../../../node_modules/@apollo/src/link/utils/transformOperation.ts", "../../../../node_modules/@apollo/src/link/core/ApolloLink.ts", "../../../../node_modules/@apollo/src/link/core/empty.ts", "../../../../node_modules/@apollo/src/link/core/from.ts", "../../../../node_modules/@apollo/src/link/core/split.ts", "../../../../node_modules/@apollo/src/link/core/concat.ts", "../../../../node_modules/@apollo/src/link/core/execute.ts", "../../../../node_modules/@apollo/src/version.ts", "../../../../node_modules/@apollo/src/link/http/parseAndCheckHttpResponse.ts", "../../../../node_modules/@apollo/src/link/http/serializeFetchParameter.ts", "../../../../node_modules/@apollo/src/link/http/selectHttpOptionsAndBody.ts", "../../../../node_modules/@apollo/src/link/http/checkFetcher.ts", "../../../../node_modules/@apollo/src/link/http/createSignalIfSupported.ts", "../../../../node_modules/@apollo/src/link/http/selectURI.ts", "../../../../node_modules/@apollo/src/link/http/rewriteURIForGET.ts", "../../../../node_modules/@apollo/src/link/http/createHttpLink.ts", "../../../../node_modules/@apollo/src/link/http/HttpLink.ts", "../../../../node_modules/@apollo/src/errors/index.ts", "../../../../node_modules/@apollo/src/core/networkStatus.ts", "../../../../node_modules/@apollo/src/core/ObservableQuery.ts", "../../../../node_modules/@apollo/src/core/LocalState.ts", "../../../../node_modules/@apollo/src/core/QueryInfo.ts", "../../../../node_modules/@apollo/src/core/QueryManager.ts", "../../../../node_modules/@apollo/src/core/ApolloClient.ts", "../../../../node_modules/graphql-tag/src/index.ts", "../../../../node_modules/@apollo/src/core/index.ts", "../../../../node_modules/@apollo/src/react/context/ApolloConsumer.tsx", "../../../../node_modules/@apollo/src/react/context/ApolloContext.ts", "../../../../node_modules/@apollo/src/react/context/ApolloProvider.tsx", "../../../../node_modules/@apollo/src/react/hooks/useApolloClient.ts", "../../../../node_modules/@apollo/src/react/hooks/useLazyQuery.ts", "../../../../node_modules/@apollo/src/react/hooks/useQuery.ts", "../../../../node_modules/@apollo/src/react/parser/index.ts", "../../../../node_modules/@apollo/src/react/hooks/useMutation.ts", "../../../../node_modules/@apollo/src/react/hooks/useSubscription.ts", "../../../../node_modules/@apollo/src/react/hooks/useReactiveVar.ts"],
  "sourcesContent": ["import { Observable } from '../../utilities';\n\nexport function fromError<T>(errorValue: any): Observable<T> {\n  return new Observable<T>(observer => {\n    observer.error(errorValue);\n  });\n}\n", "import { invariant } from '../../utilities/globals';\nimport { Observable } from '../../utilities';\n\nexport function toPromise<R>(observable: Observable<R>): Promise<R> {\n  let completed = false;\n  return new Promise<R>((resolve, reject) => {\n    observable.subscribe({\n      next: data => {\n        if (completed) {\n          invariant.warn(\n            `Promise Wrapper does not support multiple results from Observable`,\n          );\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject,\n    });\n  });\n}\n", "import { Observable } from '../../utilities';\n\nexport function fromPromise<T>(promise: Promise<T>): Observable<T> {\n  return new Observable<T>(observer => {\n    promise\n      .then((value: T) => {\n        observer.next(value);\n        observer.complete();\n      })\n      .catch(observer.error.bind(observer));\n  });\n}\n", "export type ServerError = Error & {\n  response: Response;\n  result: Record<string, any>;\n  statusCode: number;\n};\n\nexport const throwServerError = (\n  response: Response,\n  result: any,\n  message: string\n) => {\n  const error = new Error(message) as ServerError;\n  error.name = 'ServerError';\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n", "import { InvariantError } from '../../utilities/globals'\nimport { GraphQLRequest } from '../core';\n\nexport function validateOperation(operation: GraphQLRequest): GraphQLRequest {\n  const OPERATION_FIELDS = [\n    'query',\n    'operationName',\n    'variables',\n    'extensions',\n    'context',\n  ];\n  for (let key of Object.keys(operation)) {\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw new InvariantError(`illegal argument: ${key}`);\n    }\n  }\n\n  return operation;\n}\n", "import { GraphQLRequest, Operation } from '../core';\n\nexport function createOperation(\n  starting: any,\n  operation: GraphQLRequest,\n): Operation {\n  let context = { ...starting };\n  const setContext = (next: any) => {\n    if (typeof next === 'function') {\n      context = { ...context, ...next(context) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext = () => ({ ...context });\n\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext,\n  });\n\n  return operation as Operation;\n}\n", "import { GraphQLRequest, Operation } from '../core';\nimport { getOperationName } from '../../utilities';\n\nexport function transformOperation(operation: GraphQLRequest): GraphQLRequest {\n  const transformedOperation: GraphQLRequest = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query,\n  };\n\n  // Best guess at an operation name\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName =\n      typeof transformedOperation.query !== 'string'\n        ? getOperationName(transformedOperation.query) || undefined\n        : '';\n  }\n\n  return transformedOperation as Operation;\n}\n", "import { InvariantError, invariant } from '../../utilities/globals';\n\nimport { Observable, Observer } from '../../utilities';\nimport {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest\n} from './types';\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from '../utils';\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nclass LinkError extends Error {\n  public link?: ApolloLink;\n  constructor(message?: string, link?: ApolloLink) {\n    super(message);\n    this.link = link;\n  }\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(operation => {\n        return test(operation)\n          ? leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return test(operation)\n          ? leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest,\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation)),\n        ),\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler,\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        new LinkError(\n          `You are calling concat on a terminating link, which will have no effect`,\n          firstLink,\n        ),\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(\n        operation =>\n          firstLink.request(\n            operation,\n            op => nextLink.request(op) || Observable.of(),\n          ) || Observable.of(),\n      );\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, op => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    throw new InvariantError('request is not implemented');\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>,\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n}\n", "import { ApolloLink } from './ApolloLink';\n\nexport const empty = ApolloLink.empty;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const from = ApolloLink.from;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const split = ApolloLink.split;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const concat = ApolloLink.concat;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const execute = ApolloLink.execute;\n", "export const version = 'local';\n", "import { Operation } from '../core';\nimport { throwServerError } from '../utils';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport function parseAndCheckHttpResponse(\n  operations: Operation | Operation[],\n) {\n  return (response: Response) => response\n    .text()\n    .then(bodyText => {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        const parseError = err as ServerParseError;\n        parseError.name = 'ServerParseError';\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n      }\n    })\n    .then((result: any) => {\n      if (response.status >= 300) {\n        // Network error\n        throwServerError(\n          response,\n          result,\n          `Response not successful: Received status code ${response.status}`,\n        );\n      }\n\n      if (\n        !Array.isArray(result) &&\n        !hasOwnProperty.call(result, 'data') &&\n        !hasOwnProperty.call(result, 'errors')\n      ) {\n        // Data error\n        throwServerError(\n          response,\n          result,\n          `Server response was missing for query '${\n            Array.isArray(operations)\n              ? operations.map(op => op.operationName)\n              : operations.operationName\n          }'.`,\n        );\n      }\n      return result;\n    });\n}\n", "import { InvariantError } from '../../utilities/globals';\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport const serializeFetchParameter = (p: any, label: string) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    const parseError = new InvariantError(\n      `Network request failed. ${label} is not serializable: ${e.message}`,\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n", "import { ASTNode, print } from 'graphql';\n\nimport { Operation } from '../core';\n\nexport interface Printer {\n  (node: ASTNode, originalPrint: typeof print): string\n};\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n\n  /**\n   * If set to true, use the HTTP GET method for query operations. Mutations\n   * will still use the method specified in fetchOptions.method (which defaults\n   * to POST).\n   */\n  useGETForQueries?: boolean;\n\n  /**\n   * If set to true, the default behavior of stripping unused variables\n   * from the request will be disabled.\n   *\n   * Unused variables are likely to trigger server-side validation errors,\n   * per https://spec.graphql.org/draft/#sec-All-Variables-Used, but this\n   * includeUnusedVariables option can be useful if your server deviates\n   * from the GraphQL specification by not strictly enforcing that rule.\n   */\n  includeUnusedVariables?: boolean;\n  /**\n   * A function to substitute for the default query print function. Can be\n   * used to apply changes to the results of the print function.\n   */\n   print?: Printer;\n}\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const defaultPrinter: Printer = (ast, printer) => printer(ast);\n\nexport function selectHttpOptionsAndBody(\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) {\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal(\n    operation,\n    defaultPrinter,\n    ...configs,\n  );\n}\n\nexport function selectHttpOptionsAndBodyInternal(\n  operation: Operation,\n  printer: Printer,\n  ...configs: HttpConfig[]\n) {\n  let options = {} as HttpConfig & Record<string, any>;\n  let http = {} as HttpQueryOptions;\n\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...headersToLowerCase(config.headers),\n      },\n    };\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = printer(query, print);\n\n  return {\n    options,\n    body,\n  };\n};\n\nfunction headersToLowerCase(\n  headers: Record<string, string> | undefined\n): typeof headers {\n  if (headers) {\n    const normalized = Object.create(null);\n    Object.keys(Object(headers)).forEach(name => {\n      normalized[name.toLowerCase()] = headers[name];\n    });\n    return normalized;\n  }\n  return headers;\n}\n", "import { InvariantError } from '../../utilities/globals';\n\nexport const checkFetcher = (fetcher: WindowOrWorkerGlobalScope['fetch'] | undefined) => {\n  if (!fetcher && typeof fetch === 'undefined') {\n    throw new InvariantError(`\n\"fetch\" has not been found globally and no fetcher has been \\\nconfigured. To fix this, install a fetch package (like \\\nhttps://www.npmjs.com/package/cross-fetch), instantiate the \\\nfetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    `);\n  }\n};\n", "export const createSignalIfSupported = () => {\n  if (typeof AbortController === 'undefined')\n    return { controller: false, signal: false };\n\n  const controller = new AbortController();\n  const signal = controller.signal;\n  return { controller, signal };\n};\n", "import { Operation } from '../core';\n\nexport const selectURI = (\n  operation: Operation,\n  fallbackURI?: string | ((operation: Operation) => string),\n) => {\n  const context = operation.getContext();\n  const contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return (fallbackURI as string) || '/graphql';\n  }\n};\n", "import { serializeFetchParameter } from './serializeFetchParameter';\nimport { Body } from './selectHttpOptionsAndBody';\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams: string[] = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query!);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n", "import '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n", "import { ApolloLink, RequestHandler } from '../core';\nimport { HttpOptions } from './selectHttpOptionsAndBody';\nimport { createHttpLink } from './createHttpLink';\n\nexport class HttpLink extends ApolloLink {\n  public requester: RequestHandler;\n  constructor(public options: HttpOptions = {}) {\n    super(createHttpLink(options).request);\n  }\n}\n", "import '../utilities/globals';\n\nimport { GraphQLError } from 'graphql';\n\nimport { isNonEmptyArray } from '../utilities';\nimport { ServerParseError } from '../link/http';\nimport { ServerError } from '../link/utils';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {\n    const errors = ((err.graphQLErrors || []) as readonly Error[])\n      .concat(err.clientErrors || []);\n    errors.forEach((error: Error) => {\n      const errorMessage = error\n        ? error.message\n        : 'Error message not found.';\n      message += `${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += `${err.networkError.message}\\n`;\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: GraphQLErrors;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    clientErrors?: ReadonlyArray<Error>;\n    networkError?: Error | ServerParseError | ServerError | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n", "/**\n * The current status of a query\u2019s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus?: NetworkStatus,\n): boolean {\n  return networkStatus ? networkStatus < 7 : false;\n}\n", "import { invariant } from '../utilities/globals';\n\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  Concast,\n  compact,\n  cloneDeep,\n  getOperationDefinition,\n  Observable,\n  Observer,\n  ObservableSubscription,\n  iterateObserversSafely,\n  isNonEmptyArray,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from '../utilities';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\nimport { ApolloQueryResult, OperationVariables } from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions';\nimport { QueryInfo } from './QueryInfo';\nimport { MissingFieldError } from '../cache';\nimport { MissingTree } from '../cache/core/types/common';\n\nconst {\n  assign,\n  hasOwnProperty,\n} = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\nlet warnedAboutUpdateQuery = false;\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  // Original value of this.options.fetchPolicy (defaulting to \"cache-first\"),\n  // from whenever the ObservableQuery was first created.\n  private initialFetchPolicy: WatchQueryFetchPolicy;\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private last?: Last<TData, TVariables>;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // active state\n    this.isTornDown = false;\n\n    // query information\n    this.options = options;\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(options.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n\n    this.initialFetchPolicy = options.fetchPolicy || \"cache-first\";\n\n    // related classes\n    this.queryManager = queryManager;\n    this.queryInfo = queryInfo;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn\u2019t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache' ||\n      fetchPolicy === 'standby' ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.transform(this.options.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === 'cache-first' ||\n          fetchPolicy === 'cache-only')\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(newResult: ApolloQueryResult<TData>) {\n    return !this.last || !equal(this.last.result, newResult);\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean,\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(variablesMustMatch?: boolean): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.options.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(v => v.variable.name.value === \"variables\")) {\n        invariant.warn(`Called refetch(${\n          JSON.stringify(variables)\n        }) for query ${\n          queryDef.name?.value || JSON.stringify(queryDef)\n        }, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`);\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>,\n  ): Promise<ApolloQueryResult<TData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions;\n\n    const qid = this.queryManager.generateQueryId();\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.queryInfo.networkStatus = NetworkStatus.fetchMore;\n      this.observe();\n    }\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      const data = fetchMoreResult.data as TData;\n      const { updateQuery } = fetchMoreOptions;\n\n      if (updateQuery) {\n        if (__DEV__ &&\n            !warnedAboutUpdateQuery) {\n          invariant.warn(\n`The updateQuery callback for fetchMore is deprecated, and will be removed\nin the next major version of Apollo Client.\n\nPlease convert updateQuery functions to field policies with appropriate\nread and merge functions, or use/adapt a helper function (such as\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\n@apollo/client/utilities.\n\nThe field policy system handles pagination more effectively than a\nhand-written updateQuery function, and you only need to define the policy\nonce, rather than every time you call fetchMore.`);\n          warnedAboutUpdateQuery = true;\n        }\n        this.updateQuery(previous => updateQuery(previous, {\n          fetchMoreResult: data,\n          variables: combinedOptions.variables as TVariables,\n        }));\n      } else {\n        // If we're using a field policy instead of updateQuery, the only\n        // thing we need to do is write the new data to the cache using\n        // combinedOptions.variables (instead of this.variables, which is\n        // what this.updateQuery uses, because it works by abusing the\n        // original field value, keyed by the original variables).\n        this.queryManager.cache.writeQuery({\n          query: combinedOptions.query,\n          variables: combinedOptions.variables,\n          data,\n        });\n      }\n\n      return fetchMoreResult as ApolloQueryResult<TData>;\n\n    }).finally(() => {\n      this.queryManager.stopQuery(qid);\n      this.reobserve();\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.initialFetchPolicy,\n      variables,\n    }, NetworkStatus.setVariables);\n  }\n\n  public updateQuery<TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n  ): Concast<ApolloQueryResult<TData>> {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager.fetchQueryObservable(\n      this.queryId,\n      options,\n      newNetworkStatus,\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve({\n            fetchPolicy: \"network-only\",\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables,\n  ) {\n    this.last = {\n      ...this.last,\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n    };\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n\n    const options = useDisposableConcast\n      // Disposable Concast fetches receive a shallow copy of this.options\n      // (merged with newOptions), leaving this.options unmodified.\n      ? compact(this.options, newOptions)\n      : assign(this.options, compact(newOptions));\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !newOptions.fetchPolicy &&\n        !equal(newOptions.variables, oldVariables)\n      ) {\n        options.fetchPolicy = this.initialFetchPolicy;\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    const variables = options.variables && { ...options.variables };\n    const concast = this.fetch(options, newNetworkStatus);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: result => {\n        this.reportResult(result, variables);\n      },\n      error: error => {\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object, in part so\n      // that we can remove it here without triggering any unsubscriptions,\n      // because we just want to ignore the old observable, not prematurely shut\n      // it down, since other consumers may be awaiting this.concast.promise.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer, true);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast.promise;\n  }\n\n  // Pass the current result to this.observer.next without applying any\n  // fetch policies.\n  private observe() {\n    // Passing false is important so that this.getCurrentResult doesn't\n    // save the fetchMore result as this.lastResult, causing it to be\n    // ignored due to the this.isDifferentFromLastResult check in\n    // this.observer.next.\n    this.reportResult(\n      this.getCurrentResult(false),\n      this.variables,\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined,\n  ) {\n    const lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  }\n\n  private reportError(\n    error: ApolloError,\n    variables: TVariables | undefined,\n  ) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, 'error', this.last!.error = error);\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined,\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: ${\n      JSON.stringify(missing)\n    }`, missing);\n  }\n}\n\n// Adopt options.nextFetchPolicy (if defined) as a replacement for\n// options.fetchPolicy. Since this method also removes options.nextFetchPolicy\n// from options, the adoption tends to be idempotent, unless nextFetchPolicy\n// is a function that keeps setting options.nextFetchPolicy (uncommon).\nexport function applyNextFetchPolicy<TData, TVars>(\n  options: Pick<\n    WatchQueryOptions<TVars, TData>,\n    | \"fetchPolicy\"\n    | \"nextFetchPolicy\"\n  >,\n) {\n  const {\n    fetchPolicy = \"cache-first\",\n    nextFetchPolicy,\n  } = options;\n\n  if (nextFetchPolicy) {\n    // When someone chooses \"cache-and-network\" or \"network-only\" as their\n    // initial FetchPolicy, they often do not want future cache updates to\n    // trigger unconditional network requests, which is what repeatedly\n    // applying the \"cache-and-network\" or \"network-only\" policies would seem\n    // to imply. Instead, when the cache reports an update after the initial\n    // network request, it may be desirable for subsequent network requests to\n    // be triggered only if the cache result is incomplete. To that end, the\n    // options.nextFetchPolicy option provides an easy way to update\n    // options.fetchPolicy after the initial network request, without having to\n    // call observableQuery.setOptions.\n    options.fetchPolicy = typeof nextFetchPolicy === \"function\"\n      ? nextFetchPolicy.call(options, fetchPolicy)\n      : nextFetchPolicy;\n  }\n}\n", "import { invariant } from '../utilities/globals';\n\nimport {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  visit,\n  BREAK,\n} from 'graphql';\n\nimport { ApolloCache } from '../cache';\nimport {\n  FragmentMap,\n  StoreObject,\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from '../utilities';\nimport { ApolloClient } from './ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { FetchResult } from '../link/core';\nimport { cacheSlot } from '../cache';\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document);\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n\n    const definitionOperation = (mainDefinition as OperationDefinitionNode)\n      .operation;\n\n    const defaultOperationType = definitionOperation\n      ? definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      onlyRunForcedResolvers,\n    };\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }),\n    );\n  }\n}\n", "import { DocumentNode, GraphQLError } from 'graphql';\nimport { equal } from \"@wry/equality\";\n\nimport { Cache, ApolloCache } from '../cache';\nimport { WatchQueryOptions, ErrorPolicy } from './watchQueryOptions';\nimport { ObservableQuery } from './ObservableQuery';\nimport { QueryListener } from './types';\nimport { FetchResult } from '../link/core';\nimport {\n  ObservableSubscription,\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from '../utilities';\nimport {\n  NetworkStatus,\n  isNetworkRequestInFlight,\n} from './networkStatus';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\n\nexport type QueryStoreValue = Pick<QueryInfo,\n  | \"variables\"\n  | \"networkStatus\"\n  | \"networkError\"\n  | \"graphQLErrors\"\n  >;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n};\n\nconst destructiveMethodCounts = new (\n  canUseWeakMap ? WeakMap : Map\n)<ApolloCache<any>, number>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: keyof ApolloCache<any>,\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15,\n      );\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info: QueryInfo) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  listeners = new Set<QueryListener>();\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  subscriptions = new Set<ObservableSubscription>();\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  stopped = false;\n\n  private cache: ApolloCache<any>;\n\n  constructor(\n    queryManager: QueryManager<any>,\n    public readonly queryId = queryManager.generateQueryId(),\n  ) {\n    const cache = this.cache = queryManager.cache;\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus,\n    observableQuery?: ObservableQuery<any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables &&\n        this.networkStatus !== NetworkStatus.loading &&\n        !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  reset() {\n    cancelNotifyTimeout(this);\n    this.lastDiff = void 0;\n    this.dirty = false;\n  }\n\n  getDiff(variables = this.variables): Cache.DiffResult<any> {\n    const options = this.getDiffOptions(variables);\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return { complete: false };\n    }\n\n    const diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  }\n\n  private lastDiff?: {\n    diff: Cache.DiffResult<any>,\n    options: Cache.DiffOptions,\n  };\n\n  private updateLastDiff(\n    diff: Cache.DiffResult<any> | null,\n    options?: Cache.DiffOptions,\n  ) {\n    this.lastDiff = diff ? {\n      diff,\n      options: options || this.getDiffOptions(),\n    } : void 0;\n  }\n\n  private getDiffOptions(variables = this.variables): Cache.DiffOptions {\n    return {\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: this.observableQuery?.options.canonizeResults,\n    };\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty &&\n        !equal(oldDiff && oldDiff.result,\n               diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(() => this.notify(), 0);\n      }\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any> | null = null;\n  private oqListener?: QueryListener;\n\n  setObservableQuery(oq: ObservableQuery<any> | null) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    (this as any).observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = () => {\n        // If this.diff came from an optimistic transaction, deliver the\n        // current cache data to the ObservableQuery, but don't perform a\n        // full reobservation, since oq.reobserve might make a network\n        // request, and we don't want to trigger network requests for\n        // optimistic updates.\n        if (this.getDiff().fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          oq.reobserve();\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  }\n\n  notify() {\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(listener => listener(this));\n    }\n\n    this.dirty = false;\n  }\n\n  private shouldNotify() {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) &&\n        this.observableQuery) {\n      const { fetchPolicy } = this.observableQuery.options;\n      if (fetchPolicy !== \"cache-only\" &&\n          fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      // Cancel the pending notify timeout\n      this.reset();\n\n      this.cancel();\n      // Revert back to the no-op version of cancel inherited from\n      // QueryInfo.prototype.\n      this.cancel = QueryInfo.prototype.cancel;\n\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  // This method is a no-op by default, until/unless overridden by the\n  // updateWatch method.\n  private cancel() {}\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    const watchOptions: Cache.WatchOptions = {\n      // Although this.getDiffOptions returns Cache.DiffOptions instead of\n      // Cache.WatchOptions, all the overlapping options should be the same, so\n      // we can reuse getDiffOptions here, for consistency.\n      ...this.getDiffOptions(variables),\n      watcher: this,\n      callback: diff => this.setDiff(diff),\n    };\n\n    if (!this.lastWatch ||\n        !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"],\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    options: Pick<WatchQueryOptions,\n      | \"variables\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n    cacheWriteBehavior: CacheWriteBehavior,\n  ) {\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.reset();\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff(\n        { result: result.data, complete: true },\n        this.getDiffOptions(options.variables),\n      );\n\n    } else if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction(cache => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: this.document!,\n              data: result.data as T,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.lastDiff &&\n                this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diffOptions = this.getDiffOptions(options.variables);\n          const diff = cache.diff<T>(diffOptions);\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called.\n          if (!this.stopped) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\",\n) {\n  const ignoreErrors =\n    errorPolicy === \"ignore\" ||\n    errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n", "import { invariant, InvariantError } from '../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from '@wry/equality';\n\nimport { ApolloLink, execute, FetchResult } from '../link/core';\nimport { Cache, ApolloCache, canonicalStringify } from '../cache';\n\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n  ObservableSubscription,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  ConcastSourcesIterable,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n} from '../utilities';\nimport { ApolloError, isApolloError } from '../errors';\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  WatchQueryFetchPolicy,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery, applyNextFetchPolicy, logMissingFieldErrors } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n} from './types';\nimport { LocalState } from './LocalState';\n\nimport {\n  QueryInfo,\n  QueryStoreValue,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from './QueryInfo';\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  document: DocumentNode;\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public readonly assumeImmutableResults: boolean;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  private fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      new InvariantError('QueryManager stopped while query was in flight'),\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach(cancel => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    errorPolicy = 'none',\n    fetchPolicy = 'network-only',\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<FetchResult<TData>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache',\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n    mutation = this.transform(mutation).document;\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n\n    if (this.transform(mutation).hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      >(optimisticResponse, {\n        mutationId,\n        document: mutation,\n        variables,\n        fetchPolicy,\n        errorPolicy,\n        context,\n        updateQueries,\n        update: updateWithProxyFn,\n        keepRootFields,\n      });\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse,\n          },\n          variables,\n          false,\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            throw new ApolloError({\n              graphQLErrors: result.errors,\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === 'ignore' &&\n              graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<\n            TData,\n            TVariables,\n            TContext,\n            TCache\n          >({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: optimisticResponse ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        },\n\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // At the moment, a mutation can have only one result, so we can\n          // immediately resolve upon receiving the first result. In the future,\n          // mutations containing @defer or @stream directives might receive\n          // multiple FetchResult payloads from the ApolloLink chain, so we will\n          // probably need to collect those results in this next method and call\n          // resolve only later, in an observer.complete function.\n          resolve(storeResult);\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache,\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      });\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      mutation.refetchQueries ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache: TCache) => {\n          if (!skipCache) {\n            cacheWrites.forEach(write => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...result, data: diff.result };\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables,\n            });\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n\n      }).forEach(result => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<TData, TVariables, TContext, TCache extends ApolloCache<any>>(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>,\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean,\n    },\n  ) {\n    const data = typeof optimisticResponse === \"function\"\n      ? optimisticResponse(mutation.variables)\n      : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction(cache => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>({\n          ...mutation,\n          result: { data },\n        }, cache);\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchQueryObservable<TData, TVars>(\n      queryId,\n      options,\n      networkStatus,\n    ).promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  private transformCache = new (\n    canUseWeakMap ? WeakMap : Map\n  )<DocumentNode, TransformCacheEntry>();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const transformed = this.cache.transformDocument(document);\n      const forLink = removeConnectionDirectiveFromDocument(\n        this.cache.transformForLink(transformed));\n\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = forLink && this.localState.serverQuery(forLink);\n\n      const cacheEntry: TransformCacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...transformed,\n          definitions: transformed.definitions.map(def => {\n            if (def.kind === \"OperationDefinition\" &&\n                def.operation !== \"query\") {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        }\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    // assign variable default values if supplied\n    options = {\n      ...options,\n      variables: this.getVariables(\n        options.query,\n        options.variables,\n      ) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    queryInfo.init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId(),\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return this.fetchQuery<TData, TVars>(\n      queryId,\n      options,\n    ).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(options: Cache.ResetOptions = {\n    discardWatches: true,\n  }): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(new InvariantError(\n      'Store reset while query was in flight (not completed in link chain)',\n    ));\n\n    this.queries.forEach(queryInfo => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\",\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach(desc => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(`Unknown query ${\n            typeof nameOrDoc === \"string\" ? \"named \" : \"\"\n          }${\n            JSON.stringify(nameOrDoc, null, 2)\n          } requested in refetchQueries options.include array`);\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(\n      includeStandby ? \"all\" : \"active\"\n    ).forEach((observableQuery, queryId) => {\n      const { fetchPolicy } = observableQuery.options;\n      observableQuery.resetLastResults();\n      if (includeStandby ||\n          (fetchPolicy !== \"standby\" &&\n           fetchPolicy !== \"cache-only\")) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      this.getQuery(queryId).setDiff(null);\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy,\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        context,\n        variables,\n      ).map(result => {\n        if (fetchPolicy !== 'no-cache') {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n        context,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    this.getQuery(queryId).stop();\n    this.queries.delete(queryId);\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(info => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean =\n      // Prefer context.queryDeduplication if specified.\n      context?.queryDeduplication ??\n      this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = canonicalStringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>\n          ]);\n\n          byVariables.set(varJson, observable = concast);\n\n          concast.cleanup(() => {\n            if (byVariables.delete(varJson) &&\n                byVariables.size < 1) {\n              inFlightLinkObservables.delete(serverQuery);\n            }\n          });\n        }\n\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>\n        ]);\n      }\n    } else {\n      observable = new Concast([\n        Observable.of({ data: {} } as FetchResult<T>)\n      ]);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<WatchQueryOptions<TVars, TData>,\n      | \"variables\"\n      | \"context\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = queryInfo.lastRequestId = this.generateRequestId();\n\n    return asyncMap(\n      this.getObservableFromLink(\n        queryInfo.document!,\n        options.context,\n        options.variables,\n      ),\n\n      result => {\n        const hasErrors = isNonEmptyArray(result.errors);\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(new ApolloError({\n              graphQLErrors: result.errors,\n            }));\n          }\n          queryInfo.markResult(result, options, cacheWriteBehavior);\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: queryInfo.networkStatus || NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = result.errors;\n        }\n\n        return aqr;\n      },\n\n      networkError => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      },\n    );\n  }\n\n  public fetchQueryObservable<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n  ): Concast<ApolloQueryResult<TData>> {\n    const query = this.transform(options.query).document;\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    let {\n      fetchPolicy = \"cache-first\" as WatchQueryFetchPolicy,\n      errorPolicy = \"none\" as ErrorPolicy,\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n      return this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus,\n      );\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    this.fetchCancelFns.set(queryId, reason => {\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    // A Concast<T> can be created either from an Iterable<Observable<T>>\n    // or from a PromiseLike<Iterable<Observable<T>>>, where T in this\n    // case is ApolloQueryResult<TData>.\n    const concast = new Concast(\n      // If the query has @export(as: ...) directives, then we need to\n      // process those directives asynchronously. When there are no\n      // @export directives (the common case), we deliberately avoid\n      // wrapping the result of this.fetchQueryByPolicy in a Promise,\n      // since the timing of result delivery is (unfortunately) important\n      // for backwards compatibility. TODO This code could be simpler if\n      // we deprecated and removed LocalState.\n      this.transform(normalized.query).hasClientExports\n        ? this.localState.addExportedVariables(\n          normalized.query,\n          normalized.variables,\n          normalized.context,\n        ).then(fromVariables)\n        : fromVariables(normalized.variables!)\n    );\n\n    concast.cleanup(() => {\n      this.fetchCancelFns.delete(queryId);\n      applyNextFetchPolicy(options);\n    });\n\n    return concast;\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<ApolloCache<TStore>, TResult>\n  ): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<string, {\n      oq: ObservableQuery<any>;\n      lastDiff?: Cache.DiffResult<any>;\n      diff?: Cache.DiffResult<any>;\n    }>();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map;\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo &&\n            watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result: TResult | boolean | Promise<ApolloQueryResult<any>> | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars>(\n    queryInfo: QueryInfo,\n    { query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus,\n  ): ConcastSourcesIterable<ApolloQueryResult<TData>> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: query,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff(variables);\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading,\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ &&\n          !returnPartialData &&\n          !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) => Observable.of({\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n        ...(diff.complete ? null : { partial: true }),\n      } as ApolloQueryResult<TData>);\n\n      if (data && this.transform(query).hasForcedResolvers) {\n        return this.localState.runResolvers({\n          document: query,\n          remoteResult: { data },\n          context,\n          variables,\n          onlyRunForcedResolvers: true,\n        }).then(resolved => fromData(resolved.data || void 0));\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID :\n      ( // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ? CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () =>\n      this.getResultsFromLink<TData, TVars>(queryInfo, cacheWriteBehavior, {\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      });\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n    default: case \"cache-first\": {\n      const diff = readCache();\n\n      if (diff.complete) {\n        return [\n          resultsFromCache(diff, queryInfo.markReady()),\n        ];\n      }\n\n      if (returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-and-network\": {\n      const diff = readCache();\n\n      if (diff.complete || returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-only\":\n      return [\n        resultsFromCache(readCache(), queryInfo.markReady()),\n      ];\n\n    case \"network-only\":\n      if (shouldNotify) {\n        return [\n          resultsFromCache(readCache()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"no-cache\":\n      if (shouldNotify) {\n        return [\n          // Note that queryInfo.getDiff() for no-cache queries does not call\n          // cache.diff, but instead returns a { complete: false } stub result\n          // when there is no queryInfo.diff already defined.\n          resultsFromCache(queryInfo.getDiff()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"standby\":\n      return [];\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n", "import { invariant, InvariantError } from '../utilities/globals';\n\nimport { ExecutionResult, DocumentNode } from 'graphql';\n\nimport { ApolloLink, FetchResult, GraphQLRequest, execute } from '../link/core';\nimport { ApolloCache, DataProxy } from '../cache';\nimport { Observable, compact } from '../utilities';\nimport { version } from '../version';\nimport { HttpLink, UriFunction } from '../link/http';\n\nimport { QueryManager } from './QueryManager';\nimport { ObservableQuery } from './ObservableQuery';\n\nimport {\n  ApolloQueryResult,\n  DefaultContext,\n  OperationVariables,\n  Resolvers,\n  RefetchQueriesOptions,\n  RefetchQueriesResult,\n  InternalRefetchQueriesResult,\n  RefetchQueriesInclude,\n} from './types';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions';\n\nimport {\n  LocalState,\n  FragmentMatcher,\n} from './LocalState';\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions<any, any>>;\n  query?: Partial<QueryOptions<any, any>>;\n  mutate?: Partial<MutationOptions<any, any, any>>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: Record<string, string>;\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\ntype OptionsUnion<TData, TVariables, TContext> =\n  | WatchQueryOptions<TVariables, TData>\n  | QueryOptions<TVariables, TData>\n  | MutationOptions<TData, TVariables, TContext>;\n\nexport function mergeOptions<\n  TOptions extends OptionsUnion<any, any, any>\n>(\n  defaults: Partial<TOptions>,\n  options: TOptions,\n): TOptions {\n  return compact(defaults, options, options.variables && {\n    variables: {\n      ...defaults.variables,\n      ...options.variables,\n    },\n  });\n}\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public cache: ApolloCache<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions = {};\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private queryManager: QueryManager<TCacheShape>;\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param uri The GraphQL endpoint that Apollo Client will connect to. If\n   *            `link` is configured, this option is ignored.\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations. Passing\n   *                               `{ freezeResults: true }` to the `InMemoryCache` constructor\n   *                               can help enforce this immutability.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      uri,\n      credentials,\n      headers,\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools =\n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        typeof window === 'object' &&\n        !(window as any).__APOLLO_CLIENT__ &&\n        __DEV__,\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = false,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    if (!link) {\n      link = uri\n        ? new HttpLink({ uri, credentials, headers })\n        : ApolloLink.empty();\n    }\n\n    if (!cache) {\n      throw new InvariantError(\n        \"To initialize Apollo Client, you must specify a 'cache' property \" +\n        \"in the options object. \\n\" +\n        \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    if (connectToDevTools && typeof window === 'object') {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && __DEV__) {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self &&\n        !(window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__\n      ) {\n        const nav = window.navigator;\n        const ua = nav && nav.userAgent;\n        let url: string | undefined;\n        if (typeof ua === \"string\") {\n          if (ua.indexOf(\"Chrome/\") > -1) {\n            url = \"https://chrome.google.com/webstore/detail/\" +\n              \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n          } else if (ua.indexOf(\"Firefox/\") > -1) {\n            url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n          }\n        }\n        if (url) {\n          invariant.log(\n            \"Download the Apollo DevTools for a better development \" +\n              \"experience: \" + url\n          );\n        }\n      }\n    }\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: connectToDevTools ? () => {\n        if (this.devToolsHookCb) {\n          this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: this.queryManager.getQueryStore(),\n              mutations: this.queryManager.mutationStore || {},\n            },\n            dataWithOptimisticResults: this.cache.extract(true),\n          });\n        }\n      } : void 0,\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   * <p /><p />\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   * <p /><p />\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifier, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   * <p /><p />\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   * <p /><p />\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables = OperationVariables>(\n    options: QueryOptions<TVariables, T>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== 'cache-and-network',\n      'The cache-and-network fetchPolicy does not work with client.query, because ' +\n      'client.query can only return a single result. Please use client.watchQuery ' +\n      'to receive multiple results from the cache and the network, or consider ' +\n      'using a different fetchPolicy, such as cache-first or network-only.'\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.query<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<\n    TData = any,\n    TVariables = OperationVariables,\n    TContext = DefaultContext,\n    TCache extends ApolloCache<any> = ApolloCache<any>\n  >(\n    options: MutationOptions<TData, TVariables, TContext>,\n  ): Promise<FetchResult<TData>> {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate<TData, TVariables, TContext, TCache>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables, T>,\n  ): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    this.cache.writeQuery<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    this.cache.writeFragment<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You\u2019ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: false,\n      }))\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: true,\n      }))\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n   *\n   * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n   *\n   * It is important to remember that `refetchQueries()` *will* refetch specified active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public refetchQueries<\n    TCache extends ApolloCache<any> = ApolloCache<TCacheShape>,\n    TResult = Promise<ApolloQueryResult<any>>,\n  >(\n    options: RefetchQueriesOptions<TCache, TResult>,\n  ): RefetchQueriesResult<TResult> {\n    const map = this.queryManager.refetchQueries(options);\n    const queries: ObservableQuery<any>[] = [];\n    const results: InternalRefetchQueriesResult<TResult>[] = [];\n\n    map.forEach((result, obsQuery) => {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n\n    const result = Promise.all<TResult>(\n      results as TResult[]\n    ) as RefetchQueriesResult<TResult>;\n\n    // In case you need the raw results immediately, without awaiting\n    // Promise.all(results):\n    result.queries = queries;\n    result.results = results;\n\n    // If you decide to ignore the result Promise because you're using\n    // result.queries and result.results instead, you shouldn't have to worry\n    // about preventing uncaught rejections for the Promise.all result.\n    result.catch(error => {\n      invariant.debug(`In client.refetchQueries, Promise.all promise rejected with error ${error}`);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n   * query ID strings. An \"active\" query is one that has observers and a\n   * `fetchPolicy` other than \"standby\" or \"cache-only\". You can include all\n   * `ObservableQuery` objects (including the inactive ones) by passing \"all\"\n   * instead of \"active\", or you can include just a subset of active queries by\n   * passing an array of query names or DocumentNode objects.\n   */\n  public getObservableQueries(\n    include: RefetchQueriesInclude = \"active\",\n  ): Map<string, ObservableQuery<any>> {\n    return this.queryManager.getObservableQueries(include);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n\n  /**\n   * Define a new ApolloLink (or link chain) that Apollo Client will use.\n   */\n  public setLink(newLink: ApolloLink) {\n    this.link = this.queryManager.link = newLink;\n  }\n}\n", null, "/* Core */\n\nimport { DEV } from '../utilities/globals';\n\nexport {\n  ApolloClient,\n  ApolloClientOptions,\n  DefaultOptions,\n  mergeOptions,\n} from './ApolloClient';\nexport {\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  applyNextFetchPolicy,\n} from './ObservableQuery';\nexport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  FetchPolicy,\n  WatchQueryFetchPolicy,\n  ErrorPolicy,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n} from './watchQueryOptions';\nexport { NetworkStatus } from './networkStatus';\nexport * from './types';\nexport {\n  Resolver,\n  FragmentMatcher,\n} from './LocalState';\nexport { isApolloError, ApolloError } from '../errors';\n\n/* Cache */\n\nexport {\n  // All the exports (types and values) from ../cache, minus cacheSlot,\n  // which we want to keep semi-private.\n  Cache,\n  ApolloCache,\n  Transaction,\n  DataProxy,\n  InMemoryCache,\n  InMemoryCacheConfig,\n  MissingFieldError,\n  defaultDataIdFromObject,\n  ReactiveVar,\n  makeVar,\n  TypePolicies,\n  TypePolicy,\n  FieldPolicy,\n  FieldReadFunction,\n  FieldMergeFunction,\n  FieldFunctionOptions,\n  PossibleTypesMap,\n} from '../cache';\n\nexport * from '../cache/inmemory/types';\n\n/* Link */\n\nexport * from '../link/core';\nexport * from '../link/http';\nexport {\n  fromError,\n  toPromise,\n  fromPromise,\n  ServerError,\n  throwServerError,\n} from '../link/utils';\n\n/* Utilities */\n\nexport {\n  Observable,\n  Observer,\n  ObservableSubscription,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n} from '../utilities';\n\n/* Supporting */\n\n// The verbosity of invariant.{log,warn,error} can be controlled globally\n// (for anyone using the same ts-invariant package) by passing \"log\",\n// \"warn\", \"error\", or \"silent\" to setVerbosity (\"log\" is the default).\n// Note that all invariant.* logging is hidden in production.\nimport { setVerbosity } from \"ts-invariant\";\nexport { setVerbosity as setLogVerbosity }\nsetVerbosity(DEV ? \"log\" : \"silent\");\n\n// Note that importing `gql` by itself, then destructuring\n// additional properties separately before exporting, is intentional.\n// Due to the way the `graphql-tag` library is setup, certain bundlers\n// can't find the properties added to the exported `gql` function without\n// additional guidance (e.g. Rollup - see\n// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).\n// Instead of having people that are using bundlers with `@apollo/client` add\n// extra bundler config to help `graphql-tag` exports be found (which would be\n// awkward since they aren't importing `graphql-tag` themselves), this\n// workaround of pulling the extra properties off the `gql` function,\n// then re-exporting them separately, helps keeps bundlers happy without any\n// additional config changes.\nexport {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n} from 'graphql-tag';\n", "import { invariant } from '../../utilities/globals';\n\nimport * as React from 'react';\n\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from './ApolloContext';\n\nexport interface ApolloConsumerProps {\n  children: (client: ApolloClient<object>) => React.ReactChild | null;\n}\n\nexport const ApolloConsumer: React.FC<ApolloConsumerProps> = props => {\n  const ApolloContext = getApolloContext();\n  return (\n    <ApolloContext.Consumer>\n      {(context: any) => {\n        invariant(\n          context && context.client,\n          'Could not find \"client\" in the context of ApolloConsumer. ' +\n            'Wrap the root component in an <ApolloProvider>.'\n        );\n        return props.children(context.client);\n      }}\n    </ApolloContext.Consumer>\n  );\n};\n", "import * as React from 'react';\nimport { ApolloClient } from '../../core';\nimport { canUseSymbol } from '../../utilities';\nimport type { RenderPromises } from '../ssr';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey = canUseSymbol\n  ? Symbol.for('__APOLLO_CONTEXT__')\n  : '__APOLLO_CONTEXT__';\n\nexport function getApolloContext(): React.Context<ApolloContextValue> {\n  let context = (React.createContext as any)[contextKey] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext<ApolloContextValue>({}),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = 'ApolloContext';\n  }\n  return context;\n}\n\nexport { getApolloContext as resetApolloContext }\n", "import { invariant } from '../../utilities/globals';\n\nimport * as React from 'react';\n\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from './ApolloContext';\n\nexport interface ApolloProviderProps<TCache> {\n  client: ApolloClient<TCache>;\n  children: React.ReactNode | React.ReactNode[] | null;\n}\n\nexport const ApolloProvider: React.FC<ApolloProviderProps<any>> = ({\n  client,\n  children\n}) => {\n  const ApolloContext = getApolloContext();\n  return (\n    <ApolloContext.Consumer>\n      {(context: any = {}) => {\n        if (client && context.client !== client) {\n          context = Object.assign({}, context, { client });\n        }\n\n        invariant(\n          context.client,\n          'ApolloProvider was not passed a client instance. Make ' +\n            'sure you pass in your client via the \"client\" prop.'\n        );\n\n        return (\n          <ApolloContext.Provider value={context}>\n            {children}\n          </ApolloContext.Provider>\n        );\n      }}\n    </ApolloContext.Consumer>\n  );\n};\n", "import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n", "import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport {\n  LazyQueryHookOptions,\n  QueryLazyOptions,\n  QueryTuple,\n} from '../types/types';\nimport { useQuery } from './useQuery';\nimport { OperationVariables } from '../../core';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): QueryTuple<TData, TVariables> {\n  const [execution, setExecution] = useState<{\n    called: boolean,\n    options?: QueryLazyOptions<TVariables>,\n  }>({\n    called: false,\n  });\n\n  let result = useQuery<TData, TVariables>(query, {\n    ...options,\n    ...execution.options,\n    // We don\u2019t set skip to execution.called, because some useQuery SSR code\n    // checks skip for some reason.\n    fetchPolicy: execution.called ? options?.fetchPolicy : 'standby',\n    skip: undefined,\n  });\n\n  if (!execution.called) {\n    result = {\n      ...result,\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      called: false,\n    };\n  }\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = (...args: any) => {\n        setExecution((execution) => ({ ...execution, called: true }));\n        return (method as any)(...args);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  result.error = result.error || void 0;\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    QueryTuple<TData, TVariables>[0]\n  >((executeOptions?: QueryLazyOptions<TVariables>) => {\n    setExecution({ called: true, options: executeOptions });\n    const promise = result.refetch(executeOptions?.variables).then((result1) => {\n      const result2 = {\n        ...result,\n        data: result1.data,\n        error: result1.error,\n        called: true,\n        loading: false,\n      };\n\n      Object.assign(result2, eagerMethods);\n      return result2;\n    });\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n", "import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { equal } from '@wry/equality';\nimport { OperationVariables, mergeOptions } from '../../core';\nimport { getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const client = useApolloClient(options?.client);\n  const defaultWatchQueryOptions = client.defaultOptions.watchQuery;\n  verifyDocumentType(query, DocumentType.Query);\n  const [obsQuery, setObsQuery] = useState(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    let obsQuery: ObservableQuery<TData, TVariables> | null = null;\n    if (context.renderPromises) {\n      obsQuery = context.renderPromises.getSSRObservable(watchQueryOptions);\n    }\n\n    if (!obsQuery) {\n      // Is it safe (StrictMode/memory-wise) to call client.watchQuery here?\n      obsQuery = client.watchQuery(watchQueryOptions);\n      if (context.renderPromises) {\n        context.renderPromises.registerSSRObservable(\n          obsQuery,\n          watchQueryOptions,\n        );\n      }\n    }\n\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      obsQuery.getCurrentResult().loading\n    ) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      context.renderPromises.addQueryPromise(\n        {\n          // The only options which seem to actually be used by the\n          // RenderPromises class are query and variables.\n          getOptions: () => createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n          fetchData: () => new Promise<void>((resolve) => {\n            const sub = obsQuery!.subscribe({\n              next(result) {\n                if (!result.loading) {\n                  resolve()\n                  sub.unsubscribe();\n                }\n              },\n              error() {\n                resolve();\n                sub.unsubscribe();\n              },\n              complete() {\n                resolve();\n              },\n            });\n          }),\n        },\n        // This callback never seemed to do anything\n        () => null,\n      );\n    }\n\n    return obsQuery;\n  });\n\n  let [result, setResult] = useState(() => {\n    const result = obsQuery.getCurrentResult();\n    if (!result.loading && options) {\n      if (result.error) {\n        options.onError?.(result.error);\n      } else if (result.data) {\n        options.onCompleted?.(result.data);\n      }\n    }\n\n    return result;\n  });\n\n  const ref = useRef({\n    client,\n    query,\n    options,\n    result,\n    previousData: void 0 as TData | undefined,\n    watchQueryOptions: createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n  });\n\n  // An effect to recreate the obsQuery whenever the client or query changes.\n  // This effect is also responsible for checking and updating the obsQuery\n  // options whenever they change.\n  useEffect(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    let nextResult: ApolloQueryResult<TData> | undefined;\n    if (ref.current.client !== client || !equal(ref.current.query, query)) {\n      const obsQuery = client.watchQuery(watchQueryOptions);\n      setObsQuery(obsQuery);\n      nextResult = obsQuery.getCurrentResult();\n    } else if (!equal(ref.current.watchQueryOptions, watchQueryOptions)) {\n      obsQuery.setOptions(watchQueryOptions).catch(() => {});\n      nextResult = obsQuery.getCurrentResult();\n      ref.current.watchQueryOptions = watchQueryOptions;\n    }\n\n    if (nextResult) {\n      const previousResult = ref.current.result;\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = nextResult);\n      if (!nextResult.loading && options) {\n        if (nextResult.error) {\n          options.onError?.(nextResult.error);\n        } else if (nextResult.data) {\n          options.onCompleted?.(nextResult.data);\n        }\n      }\n    }\n\n    Object.assign(ref.current, { client, query });\n  }, [obsQuery, client, query, options]);\n\n  // An effect to subscribe to the current observable query\n  useEffect(() => {\n    if (context.renderPromises) {\n      return;\n    }\n\n    let subscription = obsQuery.subscribe(onNext, onError);\n    // We use `getCurrentResult()` instead of the callback argument because\n    // the values differ slightly. Specifically, loading results will have\n    // an empty object for data instead of `undefined` for some reason.\n    function onNext() {\n      const previousResult = ref.current.result;\n      const result = obsQuery.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (\n        previousResult &&\n        previousResult.loading === result.loading &&\n        previousResult.networkStatus === result.networkStatus &&\n        equal(previousResult.data, result.data)\n      ) {\n        return;\n      }\n\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = result);\n      if (!result.loading) {\n        ref.current.options?.onCompleted?.(result.data);\n      }\n    }\n\n    function onError(error: Error) {\n      const last = obsQuery[\"last\"];\n      subscription.unsubscribe();\n      // Unfortunately, if `lastError` is set in the current\n      // `observableQuery` when the subscription is re-created,\n      // the subscription will immediately receive the error, which will\n      // cause it to terminate again. To avoid this, we first clear\n      // the last error/result from the `observableQuery` before re-starting\n      // the subscription, and restore it afterwards (so the subscription\n      // has a chance to stay open).\n      try {\n        obsQuery.resetLastResults();\n        subscription = obsQuery.subscribe(onNext, onError);\n      } finally {\n        obsQuery[\"last\"] = last;\n      }\n\n      if (!error.hasOwnProperty('graphQLErrors')) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      const previousResult = ref.current.result;\n      if (\n        (previousResult && previousResult.loading) ||\n        !equal(error, previousResult.error)\n      ) {\n        setResult(ref.current.result = {\n          data: previousResult.data,\n          error: error as ApolloError,\n          loading: false,\n          networkStatus: NetworkStatus.error,\n        });\n        ref.current.options?.onError?.(error as ApolloError);\n      }\n    }\n\n    return () => subscription.unsubscribe();\n  }, [obsQuery, context.renderPromises, client.disableNetworkFetches]);\n\n  let partial: boolean | undefined;\n  ({ partial, ...result } = result);\n\n  {\n    // BAD BOY CODE BLOCK WHERE WE PUT SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      partial &&\n      options?.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      obsQuery.options.fetchPolicy !== 'cache-only'\n    ) {\n      result = {\n        ...result,\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      };\n\n      obsQuery.refetch();\n    }\n\n    // TODO: This is a hack to make sure useLazyQuery executions update the\n    // obsevable query options for ssr.\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      result.loading\n    ) {\n      obsQuery.setOptions(createWatchQueryOptions(query, options, defaultWatchQueryOptions)).catch(() => {});\n    }\n\n    // We assign options during rendering as a guard to make sure that\n    // callbacks like onCompleted and onError are not stale.\n    Object.assign(ref.current, { options });\n  }\n\n  if (\n    (context.renderPromises || client.disableNetworkFetches) &&\n    options?.ssr === false\n  ) {\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    result = ref.current.result = {\n      loading: true,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.loading,\n    };\n  } else if (options?.skip || options?.fetchPolicy === 'standby') {\n    // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    result = {\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.ready,\n    };\n  }\n\n  if (result.errors && result.errors.length) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    result = {\n      ...result,\n      error: result.error || new ApolloError({ graphQLErrors: result.errors }),\n    };\n  }\n\n  const obsQueryFields = useMemo(() => ({\n    refetch: obsQuery.refetch.bind(obsQuery),\n    fetchMore: obsQuery.fetchMore.bind(obsQuery),\n    updateQuery: obsQuery.updateQuery.bind(obsQuery),\n    startPolling: obsQuery.startPolling.bind(obsQuery),\n    stopPolling: obsQuery.stopPolling.bind(obsQuery),\n    subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n  }), [obsQuery]);\n\n  return {\n    ...obsQueryFields,\n    variables: createWatchQueryOptions(query, options, defaultWatchQueryOptions).variables,\n    client,\n    called: true,\n    previousData: ref.current.previousData,\n    ...result,\n  };\n}\n\n/**\n * A function to massage options before passing them the ObservableQuery.\n */\nfunction createWatchQueryOptions<TData, TVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = {},\n  defaultOptions?: Partial<WatchQueryOptions<any, any>>\n): WatchQueryOptions<TVariables, TData> {\n  // TODO: For some reason, we pass context, which is the React Apollo Context,\n  // into observable queries, and test for that.\n  // removing hook specific options\n  const {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    ...otherOptions\n  } = options;\n\n  let watchQueryOptions = { query, ...otherOptions };\n  if (defaultOptions) {\n    watchQueryOptions = mergeOptions(defaultOptions, watchQueryOptions);\n  }\n\n  if (skip) {\n    watchQueryOptions.fetchPolicy = 'standby';\n  } else if (\n    watchQueryOptions.context?.renderPromises &&\n    (\n      watchQueryOptions.fetchPolicy === 'network-only' ||\n      watchQueryOptions.fetchPolicy === 'cache-and-network'\n    )\n  ) {\n    // this behavior was added to react-apollo without explanation in this PR\n    // https://github.com/apollographql/react-apollo/pull/1579\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  } else if (!watchQueryOptions.fetchPolicy) {\n    // cache-first is the default policy, but we explicitly assign it here so\n    // the cache policies computed based on options can be cleared\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  }\n\n  if (!watchQueryOptions.variables) {\n    watchQueryOptions.variables = {} as TVariables;\n  }\n\n  return watchQueryOptions;\n}\n", "import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n", "import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      baseOptions.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (baseOptions.onError || clientOptions.onError) {\n        baseOptions.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n", "import '../../utilities/globals';\nimport { useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { equal } from '@wry/equality';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport {\n  SubscriptionHookOptions,\n  SubscriptionResult\n} from '../types/types';\nimport { OperationVariables } from '../../core';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n) {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = useState<SubscriptionResult<TData>>({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  const [observable, setObservable] = useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const ref = useRef({ client, subscription, options });\n  useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (!options?.skip !== !ref.current.options?.skip) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n      }\n    } else if (\n      shouldResubscribe !== false && (\n        client !== ref.current.client ||\n        subscription !== ref.current.subscription ||\n        options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n        !options?.skip !== !ref.current.options?.skip ||\n        !equal(options?.variables, ref.current.options?.variables)\n      )\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options?.variables,\n        fetchPolicy: options?.fetchPolicy,\n        context: options?.context,\n      }));\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options]);\n\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        ref.current.options?.onSubscriptionData?.({\n          client,\n          subscriptionData: result\n        });\n      },\n      error(error) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error,\n          variables: options?.variables,\n        });\n      },\n      complete() {\n        ref.current.options?.onSubscriptionComplete?.();\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n\n  return result;\n}\n", "import { useEffect, useState } from 'react';\nimport { ReactiveVar } from '../../core';\n\nexport function useReactiveVar<T>(rv: ReactiveVar<T>): T {\n  const value = rv();\n\n  // We don't actually care what useState thinks the value of the variable\n  // is, so we take only the update function from the returned array.\n  const setValue = useState(value)[1];\n\n  // We subscribe to variable updates on initial mount and when the value has\n  // changed. This avoids a subtle bug in React.StrictMode where multiple\n  // listeners are added, leading to inconsistent updates.\n  useEffect(() => {\n    const probablySameValue = rv();\n    if (value !== probablySameValue) {\n      // If the value of rv has already changed, we don't need to listen for the\n      // next change, because we can report this change immediately.\n      setValue(probablySameValue);\n    } else {\n      return rv.onNextChange(setValue);\n    }\n  }, [value]);\n\n  return value;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEM,mBAAuB,YAAe;AAC1C,SAAO,IAAI,WAAc,SAAA,UAAQ;AAC/B,aAAS,MAAM,UAAU;EAC3B,CAAC;AACH;;;ACHM,mBAAuB,YAAyB;AACpD,MAAI,YAAY;AAChB,SAAO,IAAI,QAAW,SAAC,SAAS,QAAM;AACpC,eAAW,UAAU;MACnB,MAAM,SAAA,MAAI;AACR,YAAI,WAAW;AACb,qBAAU,UACR,KAAA,mEACA;eACG;AACL,sBAAY;AACZ,kBAAQ,IAAI;;MAEhB;MACA,OAAO;KACR;EACH,CAAC;AACH;;;AClBM,qBAAyB,SAAmB;AAChD,SAAO,IAAI,WAAc,SAAA,UAAQ;AAC/B,YACG,KAAK,SAAC,OAAQ;AACb,eAAS,KAAK,KAAK;AACnB,eAAS,SAAQ;IACnB,CAAC,EACA,MAAM,SAAS,MAAM,KAAK,QAAQ,CAAC;EACxC,CAAC;AACH;;;ACLO,IAAM,mBAAmB,SAC9B,UACA,QACA,SAAe;AAEf,MAAM,QAAQ,IAAI,MAAM,OAAO;AAC/B,QAAM,OAAO;AACb,QAAM,WAAW;AACjB,QAAM,aAAa,SAAS;AAC5B,QAAM,SAAS;AACf,QAAM;AACR;;;ACdM,2BAA4B,WAAyB;AACzD,MAAM,mBAAmB;IACvB;IACA;IACA;IACA;IACA;;AAEF,WAAgB,KAAA,GAAA,KAAA,OAAO,KAAK,SAAS,GAArB,KAAA,GAAA,QAAA,MAAwB;AAAnC,QAAI,MAAG,GAAA;AACV,QAAI,iBAAiB,QAAQ,GAAG,IAAI,GAAG;AACrC,YAAM,UAAI,IAAA,eAAe,qBAAwB,OAAI,GAAA,CAAA,IAAA,IAAA,eAAA,EAAA;;;AAIzD,SAAO;AACT;;;AChBM,yBACJ,UACA,WAAyB;AAEzB,MAAI,UAAO,SAAA,CAAA,GAAQ,QAAQ;AAC3B,MAAM,aAAa,SAAC,MAAS;AAC3B,QAAI,OAAO,SAAS,YAAY;AAC9B,gBAAO,SAAA,SAAA,CAAA,GAAQ,OAAO,GAAK,KAAK,OAAO,CAAC;WACnC;AACL,gBAAO,SAAA,SAAA,CAAA,GAAQ,OAAO,GAAK,IAAI;;EAEnC;AACA,MAAM,aAAa,WAAA;AAAM,WAAA,SAAA,CAAA,GAAM,OAAO;EAAb;AAEzB,SAAO,eAAe,WAAW,cAAc;IAC7C,YAAY;IACZ,OAAO;GACR;AAED,SAAO,eAAe,WAAW,cAAc;IAC7C,YAAY;IACZ,OAAO;GACR;AAED,SAAO;AACT;;;ACxBM,4BAA6B,WAAyB;AAC1D,MAAM,uBAAuC;IAC3C,WAAW,UAAU,aAAa,CAAA;IAClC,YAAY,UAAU,cAAc,CAAA;IACpC,eAAe,UAAU;IACzB,OAAO,UAAU;;AAInB,MAAI,CAAC,qBAAqB,eAAe;AACvC,yBAAqB,gBACnB,OAAO,qBAAqB,UAAU,WAClC,iBAAiB,qBAAqB,KAAK,KAAK,SAChD;;AAGR,SAAO;AACT;;;ACJA,qBAAqB,IAAe,SAAiB;AACnD,SAAQ,UAAU,QAAQ,EAAE,IAAI,WAAW,GAAE;AAC/C;AAEA,gBAAgB,SAAoC;AAClD,SAAO,OAAO,YAAY,aAAa,IAAI,WAAW,OAAO,IAAI;AACnE;AAEA,uBAAuB,MAAgB;AACrC,SAAO,KAAK,QAAQ,UAAU;AAChC;AAEA,IAAA,YAAA,SAAA,QAAA;AAAwB,YAAA,YAAA,MAAA;AAEtB,sBAAY,SAAkB,MAAiB;AAA/C,QAAA,QACE,OAAA,KAAA,MAAM,OAAO,KAAC;AACd,UAAK,OAAO;;EACd;AACF,SAAA;AAAA,EANwB,KAAK;AAQ7B,IAAA,aAAA,WAAA;AAkFE,uBAAY,SAAwB;AAClC,QAAI;AAAS,WAAK,UAAU;EAC9B;AAnFc,cAAA,QAAd,WAAA;AACE,WAAO,IAAI,YAAW,WAAA;AAAM,aAAA,WAAW,GAAE;IAAb,CAAe;EAC7C;AAEc,cAAA,OAAd,SAAmB,OAAsC;AACvD,QAAI,MAAM,WAAW;AAAG,aAAO,YAAW,MAAK;AAC/C,WAAO,MAAM,IAAI,MAAM,EAAE,OAAO,SAAC,GAAG,GAAC;AAAK,aAAA,EAAE,OAAO,CAAC;IAAV,CAAW;EACvD;AAEc,cAAA,QAAd,SACE,MACA,MACA,OAAmC;AAEnC,QAAM,WAAW,OAAO,IAAI;AAC5B,QAAM,YAAY,OAAO,SAAS,IAAI,YAAW,WAAW,CAAC;AAE7D,QAAI,cAAc,QAAQ,KAAK,cAAc,SAAS,GAAG;AACvD,aAAO,IAAI,YAAW,SAAA,WAAS;AAC7B,eAAO,KAAK,SAAS,IACjB,SAAS,QAAQ,SAAS,KAAK,WAAW,GAAE,IAC5C,UAAU,QAAQ,SAAS,KAAK,WAAW,GAAE;MACnD,CAAC;WACI;AACL,aAAO,IAAI,YAAW,SAAC,WAAW,SAAO;AACvC,eAAO,KAAK,SAAS,IACjB,SAAS,QAAQ,WAAW,OAAO,KAAK,WAAW,GAAE,IACrD,UAAU,QAAQ,WAAW,OAAO,KAAK,WAAW,GAAE;MAC5D,CAAC;;EAEL;AAEc,cAAA,UAAd,SACE,MACA,WAAyB;AAEzB,WACE,KAAK,QACH,gBACE,UAAU,SACV,mBAAmB,kBAAkB,SAAS,CAAC,CAAC,CACjD,KACE,WAAW,GAAE;EAEtB;AAEc,cAAA,SAAd,SACE,OACA,QAAmC;AAEnC,QAAM,YAAY,OAAO,KAAK;AAC9B,QAAI,cAAc,SAAS,GAAG;AAC5B,iBAAU,UACJ,KAAA,IACF,UAAA,2EAGH,SAAC,CAAA;AACF,aAAO;;AAET,QAAM,WAAW,OAAO,MAAM;AAE9B,QAAI,cAAc,QAAQ,GAAG;AAC3B,aAAO,IAAI,YACT,SAAA,WAAS;AACP,eAAA,UAAU,QACR,WACA,SAAA,IAAE;AAAI,iBAAA,SAAS,QAAQ,EAAE,KAAK,WAAW,GAAE;QAArC,CAAuC,KAC1C,WAAW,GAAE;MAHlB,CAGoB;WAEnB;AACL,aAAO,IAAI,YAAW,SAAC,WAAW,SAAO;AACvC,eACE,UAAU,QAAQ,WAAW,SAAA,IAAE;AAC7B,iBAAO,SAAS,QAAQ,IAAI,OAAO,KAAK,WAAW,GAAE;QACvD,CAAC,KAAK,WAAW,GAAE;MAEvB,CAAC;;EAEL;AAMO,cAAA,UAAA,QAAP,SACE,MACA,MACA,OAAmC;AAEnC,WAAO,KAAK,OACV,YAAW,MAAM,MAAM,MAAM,SAAS,IAAI,YAAW,WAAW,CAAC,CAAC;EAEtE;AAEO,cAAA,UAAA,SAAP,SAAc,MAAiC;AAC7C,WAAO,YAAW,OAAO,MAAM,IAAI;EACrC;AAEO,cAAA,UAAA,UAAP,SACE,WACA,SAAkB;AAElB,UAAM,UAAI,IAAA,eAAe,4BAA8B,IAAA,IAAA,eAAA,EAAA;EACzD;AAEU,cAAA,UAAA,UAAV,SACE,OACA,UAAgC;AAEhC,QAAI,YAAY,SAAS,OAAO;AAC9B,eAAS,MAAM,KAAK;AAOpB,aAAO;;AAGT,UAAM;EACR;AAEO,cAAA,UAAA,aAAP,SAAkB,IAAyB;AACzC,SAAK,UAAU;AACf,WAAO;EACT;AACF,SAAA;AAAA,EAjIA;;;AClCO,IAAM,QAAQ,WAAW;;;ACAzB,IAAM,OAAO,WAAW;;;ACAxB,IAAM,QAAQ,WAAW;;;ACAzB,IAAM,SAAS,WAAW;;;ACA1B,IAAM,UAAU,WAAW;;;ACF3B,IAAM,UAAU;;;ACGf,IAAA,iBAAmB,OAAO,UAAS;AAQrC,mCACJ,YAAmC;AAEnC,SAAO,SAAC,UAAkB;AAAK,WAAA,SAC5B,KAAI,EACJ,KAAK,SAAA,UAAQ;AACZ,UAAI;AACF,eAAO,KAAK,MAAM,QAAQ;eACnB,KAAP;AACA,YAAM,aAAa;AACnB,mBAAW,OAAO;AAClB,mBAAW,WAAW;AACtB,mBAAW,aAAa,SAAS;AACjC,mBAAW,WAAW;AACtB,cAAM;;IAEV,CAAC,EACA,KAAK,SAAC,QAAW;AAChB,UAAI,SAAS,UAAU,KAAK;AAE1B,yBACE,UACA,QACA,iDAAA,OAAiD,SAAS,MAAM,CAAE;;AAItE,UACE,CAAC,MAAM,QAAQ,MAAM,KACrB,CAAC,eAAe,KAAK,QAAQ,MAAM,KACnC,CAAC,eAAe,KAAK,QAAQ,QAAQ,GACrC;AAEA,yBACE,UACA,QACA,0CAAA,OACE,MAAM,QAAQ,UAAU,IACpB,WAAW,IAAI,SAAA,IAAE;AAAI,iBAAA,GAAG;QAAH,CAAgB,IACrC,WAAW,eAAa,IAAA,CAC1B;;AAGR,aAAO;IACT,CAAC;EAzC4B;AA0CjC;;;AClDO,IAAM,0BAA0B,SAAC,GAAQ,OAAa;AAC3D,MAAI;AACJ,MAAI;AACF,iBAAa,KAAK,UAAU,CAAC;WACtB,GAAP;AACA,QAAM,aAAa,UAAI,IAAA,eACrB,2BAA2B,OAAK,OAAA,wBAA0B,EAAC,OAAS,EAChD,OAAA,CAAA,IAAA,IAAA,eAAA,EAAA;AACtB,eAAW,aAAa;AACxB,UAAM;;AAER,SAAO;AACT;;;ACwEA,IAAM,qBAAuC;EAC3C,cAAc;EACd,mBAAmB;;AAGrB,IAAM,iBAAiB;EAErB,QAAQ;EACR,gBAAgB;;AAGlB,IAAM,iBAAiB;EACrB,QAAQ;;AAGH,IAAM,qBAAqB;EAChC,MAAM;EACN,SAAS;EACT,SAAS;;AAGJ,IAAM,iBAA0B,SAAC,KAAK,SAAO;AAAK,SAAA,QAAQ,GAAG;AAAX;AAEnD,kCACJ,WACA,gBAA0B;AAC1B,MAAA,UAAA,CAAA;WAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAA6B;AAA7B,YAAA,KAAA,KAAA,UAAA;;AAEA,UAAQ,QAAQ,cAAc;AAC9B,SAAO,iCAAgC,MAAA,QAAA,cAAA;IACrC;IACA;EAAc,GACX,SAAO,KAAA,CAAA;AAEd;AAEM,0CACJ,WACA,SAAgB;AAChB,MAAA,UAAA,CAAA;WAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAAwB;AAAxB,YAAA,KAAA,KAAA,UAAA;;AAEA,MAAI,UAAU,CAAA;AACd,MAAI,OAAO,CAAA;AAEX,UAAQ,QAAQ,SAAA,QAAM;AACpB,cAAO,SAAA,SAAA,SAAA,CAAA,GACF,OAAO,GACP,OAAO,OAAO,GAAA,EACjB,SAAO,SAAA,SAAA,CAAA,GACF,QAAQ,OAAO,GACf,mBAAmB,OAAO,OAAO,CAAC,EAAA,CAAA;AAIzC,QAAI,OAAO,aAAa;AACtB,cAAQ,cAAc,OAAO;;AAG/B,WAAI,SAAA,SAAA,CAAA,GACC,IAAI,GACJ,OAAO,IAAI;EAElB,CAAC;AAGO,MAAA,iBAAgD,UAAS,eAA1C,aAAiC,UAAS,YAA9B,YAAqB,UAAS,WAAnB,QAAU,UAAS;AACjE,MAAM,OAAa,EAAE,eAAa,gBAAE,UAAS;AAE7C,MAAI,KAAK;AAAoB,SAAa,aAAa;AAGvD,MAAI,KAAK;AAAe,SAAa,QAAQ,QAAQ,OAAO,KAAK;AAEjE,SAAO;IACL;IACA;;AAEJ;AAEA,4BACE,SAA2C;AAE3C,MAAI,SAAS;AACX,QAAM,eAAa,uBAAO,OAAO,IAAI;AACrC,WAAO,KAAK,OAAO,OAAO,CAAC,EAAE,QAAQ,SAAA,MAAI;AACvC,mBAAW,KAAK,YAAW,KAAM,QAAQ;IAC3C,CAAC;AACD,WAAO;;AAET,SAAO;AACT;;;AClLO,IAAM,eAAe,SAAC,SAAuD;AAClF,MAAI,CAAC,WAAW,OAAO,UAAU,aAAa;AAC5C,UAAM,UAAI,IAAA,eAAe;;;;;;;;KAWtB,IAAA,IAAA,eAAA,EAAA;;AAEP;;;ACjBO,IAAM,0BAA0B,WAAA;AACrC,MAAI,OAAO,oBAAoB;AAC7B,WAAO,EAAE,YAAY,OAAO,QAAQ,MAAK;AAE3C,MAAM,aAAa,IAAI,gBAAe;AACtC,MAAM,SAAS,WAAW;AAC1B,SAAO,EAAE,YAAY,OAAM;AAC7B;;;ACLO,IAAM,YAAY,SACvB,WACA,aAAyD;AAEzD,MAAM,UAAU,UAAU,WAAU;AACpC,MAAM,aAAa,QAAQ;AAE3B,MAAI,YAAY;AACd,WAAO;aACE,OAAO,gBAAgB,YAAY;AAC5C,WAAO,YAAY,SAAS;SACvB;AACL,WAAQ,eAA0B;;AAEtC;;;ACXM,0BAA2B,WAAmB,MAAU;AAG5D,MAAM,cAAwB,CAAA;AAC9B,MAAM,gBAAgB,SAAC,KAAa,OAAa;AAC/C,gBAAY,KAAK,GAAA,OAAG,KAAG,GAAA,EAAA,OAAI,mBAAmB,KAAK,CAAC,CAAE;EACxD;AAEA,MAAI,WAAW,MAAM;AACnB,kBAAc,SAAS,KAAK,KAAM;;AAEpC,MAAI,KAAK,eAAe;AACtB,kBAAc,iBAAiB,KAAK,aAAa;;AAEnD,MAAI,KAAK,WAAW;AAClB,QAAI,sBAAmB;AACvB,QAAI;AACF,4BAAsB,wBACpB,KAAK,WACL,eAAe;aAEV,YAAP;AACA,aAAO,EAAE,WAAU;;AAErB,kBAAc,aAAa,mBAAmB;;AAEhD,MAAI,KAAK,YAAY;AACnB,QAAI,uBAAoB;AACxB,QAAI;AACF,6BAAuB,wBACrB,KAAK,YACL,gBAAgB;aAEX,YAAP;AACA,aAAO,EAAE,WAAU;;AAErB,kBAAc,cAAc,oBAAoB;;AASlD,MAAI,WAAW,IACb,cAAc;AAChB,MAAM,gBAAgB,UAAU,QAAQ,GAAG;AAC3C,MAAI,kBAAkB,IAAI;AACxB,eAAW,UAAU,OAAO,aAAa;AACzC,kBAAc,UAAU,OAAO,GAAG,aAAa;;AAEjD,MAAM,oBAAoB,YAAY,QAAQ,GAAG,MAAM,KAAK,MAAM;AAClE,MAAM,SACJ,cAAc,oBAAoB,YAAY,KAAK,GAAG,IAAI;AAC5D,SAAO,EAAE,OAAM;AACjB;;;ACxCA,IAAM,cAAc,MAAM,WAAA;AAAM,SAAA;AAAA,CAAK;AAE9B,IAAM,iBAAiB,SAAC,aAA6B;AAA7B,MAAA,gBAAA,QAAA;AAAA,kBAAA,CAAA;EAA6B;AAExD,MAAA,KAQE,YAAW,KARb,MAAG,OAAA,SAAG,aAAU,IAET,iBAML,YAAW,OALb,KAKE,YAAW,OALb,SAAK,OAAA,SAAG,iBAAc,IACtB,oBAIE,YAAW,mBAHb,mBAGE,YAAW,kBAFb,KAEE,YAAW,wBAFb,yBAAsB,OAAA,SAAG,QAAK,IAC3B,iBAAc,OACf,aATA,CAAA,OAAA,SAAA,SAAA,qBAAA,oBAAA,wBAAA,CASH;AAED,MAAI,SAAS;AAGX,iBAAa,kBAAkB,WAAW;;AAG5C,MAAM,aAAa;IACjB,MAAM,EAAE,kBAAiB;IACzB,SAAS,eAAe;IACxB,aAAa,eAAe;IAC5B,SAAS,eAAe;;AAG1B,SAAO,IAAI,WAAW,SAAA,WAAS;AAC7B,QAAI,YAAY,UAAU,WAAW,GAAG;AAExC,QAAM,UAAU,UAAU,WAAU;AAQpC,QAAM,yBAGF,CAAA;AAEJ,QAAI,QAAQ,iBAAiB;AACrB,UAAA,MAAoB,QAAQ,iBAA1B,SAAI,IAAA,MAAE,WAAO,IAAA;AACrB,UAAI,QAAM;AACR,+BAAuB,+BAA+B;;AAExD,UAAI,UAAS;AACX,+BAAuB,kCAAkC;;;AAI7D,QAAM,iBAAc,SAAA,SAAA,CAAA,GAAQ,sBAAsB,GAAK,QAAQ,OAAO;AAEtE,QAAM,gBAAgB;MACpB,MAAM,QAAQ;MACd,SAAS,QAAQ;MACjB,aAAa,QAAQ;MACrB,SAAS;;AAIL,QAAA,MAAoB,iCACxB,WACA,QACA,oBACA,YACA,aAAa,GALP,UAAO,IAAA,SAAE,OAAI,IAAA;AAQrB,QAAI,KAAK,aAAa,CAAC,wBAAwB;AAC7C,UAAM,gBAAc,IAAI,IAAI,OAAO,KAAK,KAAK,SAAS,CAAC;AACvD,YAAM,UAAU,OAAO;QACrB,UAAA,SAAS,MAAM,MAAM,QAAM;AAKzB,cAAI,UAAW,OAAkC,SAAS,sBAAsB;AAC9E,0BAAY,OAAO,KAAK,KAAK,KAAK;;QAEtC;OACD;AACD,UAAI,cAAY,MAAM;AAGpB,aAAK,YAAS,SAAA,CAAA,GAAQ,KAAK,SAAS;AACpC,sBAAY,QAAQ,SAAA,MAAI;AACtB,iBAAO,KAAK,UAAW;QACzB,CAAC;;;AAIL,QAAI;AACJ,QAAI,CAAE,QAAgB,QAAQ;AACtB,UAAA,MAAsC,wBAAuB,GAA/C,cAAW,IAAA,YAAE,SAAM,IAAA;AACvC,mBAAa;AACb,UAAI;AAAa,gBAAgB,SAAS;;AAI5C,QAAM,uBAAuB,SAAC,GAAiB;AAC7C,aAAO,EAAE,SAAS,yBAAyB,EAAE,cAAc;IAC7D;AACA,QACE,oBACA,CAAC,UAAU,MAAM,YAAY,KAAK,oBAAoB,GACtD;AACA,cAAQ,SAAS;;AAGnB,QAAI,QAAQ,WAAW,OAAO;AACtB,UAAA,KAAyB,iBAAiB,WAAW,IAAI,GAAvD,SAAM,GAAA,QAAE,aAAU,GAAA;AAC1B,UAAI,YAAY;AACd,eAAO,UAAU,UAAU;;AAE7B,kBAAY;WACP;AACL,UAAI;AACD,gBAAgB,OAAO,wBAAwB,MAAM,SAAS;eACxD,aAAP;AACA,eAAO,UAAU,WAAU;;;AAI/B,WAAO,IAAI,WAAW,SAAA,UAAQ;AAM5B,UAAM,eAAe,kBAAkB,MAAM,WAAA;AAAM,eAAA;MAAA,CAAK,KAAK;AAE7D,mBAAc,WAAW,OAAO,EAC7B,KAAK,SAAA,UAAQ;AACZ,kBAAU,WAAW,EAAE,SAAQ,CAAE;AACjC,eAAO;MACT,CAAC,EACA,KAAK,0BAA0B,SAAS,CAAC,EACzC,KAAK,SAAA,QAAM;AAEV,iBAAS,KAAK,MAAM;AACpB,iBAAS,SAAQ;AACjB,eAAO;MACT,CAAC,EACA,MAAM,SAAA,KAAG;AAER,YAAI,IAAI,SAAS;AAAc;AAO/B,YAAI,IAAI,UAAU,IAAI,OAAO,UAAU,IAAI,OAAO,MAAM;AA2BtD,mBAAS,KAAK,IAAI,MAAM;;AAE1B,iBAAS,MAAM,GAAG;MACpB,CAAC;AAEH,aAAO,WAAA;AAGL,YAAI;AAAY,qBAAW,MAAK;MAClC;IACF,CAAC;EACH,CAAC;AACH;;;ACnNA,IAAA,WAAA,SAAA,QAAA;AAA8B,YAAA,WAAA,MAAA;AAE5B,qBAAmB,SAAyB;AAAzB,QAAA,YAAA,QAAA;AAAA,gBAAA,CAAA;IAAyB;AAA5C,QAAA,QACE,OAAA,KAAA,MAAM,eAAe,OAAO,EAAE,OAAO,KAAC;AADrB,UAAA,UAAA;;EAEnB;AACF,SAAA;AAAA,EAL8B,UAAU;;;ACIlC,uBAAwB,KAAU;AACtC,SAAO,IAAI,eAAe,eAAe;AAC3C;AAMA,IAAM,uBAAuB,SAAC,KAAgB;AAC5C,MAAI,UAAU;AAEd,MAAI,gBAAgB,IAAI,aAAa,KAAK,gBAAgB,IAAI,YAAY,GAAG;AAC3E,QAAM,SAAW,KAAI,iBAAiB,CAAA,GACnC,OAAO,IAAI,gBAAgB,CAAA,CAAE;AAChC,WAAO,QAAQ,SAAC,OAAY;AAC1B,UAAM,eAAe,QACjB,MAAM,UACN;AACJ,iBAAW,GAAA,OAAG,cAAY,IAAA;IAC5B,CAAC;;AAGH,MAAI,IAAI,cAAc;AACpB,eAAW,GAAA,OAAG,IAAI,aAAa,SAAO,IAAA;;AAIxC,YAAU,QAAQ,QAAQ,OAAO,EAAE;AACnC,SAAO;AACT;AAMA,IAAA,cAAA,SAAA,QAAA;AAAiC,YAAA,cAAA,MAAA;AAc/B,wBAAY,IAYX;QAXC,gBAAa,GAAA,eACb,eAAY,GAAA,cACZ,eAAY,GAAA,cACZ,eAAY,GAAA,cACZ,YAAS,GAAA;AALX,QAAA,QAaE,OAAA,KAAA,MAAM,YAAY,KAAC;AACnB,UAAK,gBAAgB,iBAAiB,CAAA;AACtC,UAAK,eAAe,gBAAgB,CAAA;AACpC,UAAK,eAAe,gBAAgB;AACpC,UAAK,UAAU,gBAAgB,qBAAqB,KAAI;AACxD,UAAK,YAAY;AAIhB,UAAa,YAAY,aAAY;;EACxC;AACF,SAAA;AAAA,EAtCiC,KAAK;;;ACxCtC,IAAY;AAAZ,AAAA,UAAY,gBAAa;AAMvB,iBAAA,eAAA,aAAA,KAAA;AAMA,iBAAA,eAAA,kBAAA,KAAA;AAMA,iBAAA,eAAA,eAAA,KAAA;AAMA,iBAAA,eAAA,aAAA,KAAA;AAOA,iBAAA,eAAA,UAAA,KAAA;AAKA,iBAAA,eAAA,WAAA,KAAA;AAKA,iBAAA,eAAA,WAAA,KAAA;AACF,GA1CY,iBAAA,iBAAa,CAAA,EAAA;AAgDnB,kCACJ,eAA6B;AAE7B,SAAO,gBAAgB,gBAAgB,IAAI;AAC7C;;;ACvBE,IAAA,SAEE,OAAM;AAFR,IACA,kBACE,OAAM;AAmBV,IAAI,yBAAyB;AAQ7B,IAAA,kBAAA,SAAA,QAAA;AAGU,YAAA,kBAAA,MAAA;AAkCR,4BAAY,IAQX;QAPC,eAAY,GAAA,cACZ,YAAS,GAAA,WACT,UAAO,GAAA;AAHT,QAAA,QASE,OAAA,KAAA,MAAM,SAAC,UAA4C;AAGjD,UAAI;AACF,YAAI,cAAe,SAAiB,cAAc;AAClD,YAAI,eAAe,CAAC,YAAY,OAAO;AACrC,sBAAY,QAAQ;;eAEtB,KAAA;MAAM;AAER,UAAM,QAAQ,CAAC,MAAK,UAAU;AAC9B,YAAK,UAAU,IAAI,QAAQ;AAG3B,UAAM,OAAO,MAAK;AAClB,UAAI,QAAQ,KAAK,OAAO;AACtB,iBAAS,SAAS,SAAS,MAAM,KAAK,KAAK;iBAClC,QAAQ,KAAK,QAAQ;AAC9B,iBAAS,QAAQ,SAAS,KAAK,KAAK,MAAM;;AAK5C,UAAI,OAAO;AAKT,cAAK,UAAS,EAAG,MAAM,WAAA;QAAO,CAAC;;AAGjC,aAAO,WAAA;AACL,YAAI,MAAK,UAAU,OAAO,QAAQ,KAAK,CAAC,MAAK,UAAU,MAAM;AAC3D,gBAAK,cAAa;;MAEtB;IACF,CAAC,KAAC;AA9DI,UAAA,YAAY,oBAAI,IAAG;AACnB,UAAA,gBAAgB,oBAAI,IAAG;AAgE7B,UAAK,aAAa;AAGlB,UAAK,UAAU;AACf,UAAK,UAAU,UAAU,WAAW,aAAa,gBAAe;AAEhE,QAAM,QAAQ,uBAAuB,QAAQ,KAAK;AAClD,UAAK,YAAY,SAAS,MAAM,QAAQ,MAAM,KAAK;AAEnD,UAAK,qBAAqB,QAAQ,eAAe;AAGjD,UAAK,eAAe;AACpB,UAAK,YAAY;;EACnB;AAzFA,SAAA,eAAW,iBAAA,WAAA,aAAS;SAApB,WAAA;AACE,aAAO,KAAK,QAAQ;IACtB;;;;AAyFO,mBAAA,UAAA,SAAP,WAAA;AAAA,QAAA,QAAA;AACE,WAAO,IAAI,QAAQ,SAAC,SAAS,QAAM;AAIjC,UAAM,WAA+C;QACnD,MAAM,SAAC,QAAgC;AACrC,kBAAQ,MAAM;AAYd,gBAAK,UAAU,OAAO,QAAQ;AAC9B,cAAI,CAAC,MAAK,UAAU,MAAM;AACxB,kBAAK,aAAa,YAAY,MAAK,OAAO;;AAG5C,qBAAW,WAAA;AACT,yBAAa,YAAW;UAC1B,GAAG,CAAC;QACN;QACA,OAAO;;AAET,UAAM,eAAe,MAAK,UAAU,QAAQ;IAC9C,CAAC;EACH;AAEO,mBAAA,UAAA,mBAAP,SAAwB,kBAAuB;AAAvB,QAAA,qBAAA,QAAA;AAAA,yBAAA;IAAuB;AAE7C,QAAM,aAAa,KAAK,cAAc,IAAI;AAE1C,QAAM,gBACJ,KAAK,UAAU,iBACd,cAAc,WAAW,iBAC1B,cAAc;AAEhB,QAAM,SAAS,SAAA,SAAA,CAAA,GACV,UAAU,GAAA,EACb,SAAS,yBAAyB,aAAa,GAC/C,cAAa,CAAA;AAGP,QAAA,KAAgC,KAAK,QAAO,aAA5C,cAAW,OAAA,SAAG,gBAAa;AACnC,QAGE,gBAAgB,kBAChB,gBAAgB,cAChB,gBAAgB,aAKhB,KAAK,aAAa,UAAU,KAAK,QAAQ,KAAK,EAAE,oBAChD;WAEK;AACL,UAAM,OAAO,KAAK,UAAU,QAAO;AAEnC,UAAI,KAAK,YAAY,KAAK,QAAQ,mBAAmB;AACnD,eAAO,OAAO,KAAK;;AAGrB,UAAI,MAAM,OAAO,MAAM,CAAA,CAAE,GAAG;AAC1B,eAAO,OAAO;;AAGhB,UAAI,KAAK,UAAU;AAGjB,eAAO,OAAO;AAKd,YACE,KAAK,YACL,OAAO,kBAAkB,cAAc,WACtC,iBAAgB,iBACjB,gBAAgB,eAChB;AACA,iBAAO,gBAAgB,cAAc;AACrC,iBAAO,UAAU;;aAEd;AACL,eAAO,UAAU;;AAGnB,UACE,WACA,CAAC,KAAK,YACN,CAAC,KAAK,QAAQ,kBACd,CAAC,OAAO,WACR,CAAC,OAAO,QACR,CAAC,OAAO,OACR;AACA,8BAAsB,KAAK,OAAO;;;AAItC,QAAI,kBAAkB;AACpB,WAAK,iBAAiB,MAAM;;AAG9B,WAAO;EACT;AAIO,mBAAA,UAAA,4BAAP,SAAiC,WAAmC;AAClE,WAAO,CAAC,KAAK,QAAQ,CAAC,MAAM,KAAK,KAAK,QAAQ,SAAS;EACzD;AAEQ,mBAAA,UAAA,UAAR,SACE,KACA,oBAA4B;AAE5B,QAAM,OAAO,KAAK;AAClB,QACE,QACA,KAAK,QACJ,EAAC,sBAAsB,MAAM,KAAK,WAAW,KAAK,SAAS,IAC5D;AACA,aAAO,KAAK;;EAEhB;AAEO,mBAAA,UAAA,gBAAP,SAAqB,oBAA4B;AAC/C,WAAO,KAAK,QAAQ,UAAU,kBAAkB;EAClD;AAEO,mBAAA,UAAA,eAAP,SAAoB,oBAA4B;AAC9C,WAAO,KAAK,QAAQ,SAAS,kBAAkB;EACjD;AAEO,mBAAA,UAAA,mBAAP,WAAA;AACE,WAAO,KAAK;AACZ,SAAK,aAAa;EACpB;AAEO,mBAAA,UAAA,wBAAP,WAAA;AACE,SAAK,aAAa,YAAY,KAAK,OAAO;EAC5C;AASO,mBAAA,UAAA,UAAP,SAAe,WAA+B;;AAC5C,QAAM,mBAAkE;MAEtE,cAAc;;AAMR,QAAA,cAAgB,KAAK,QAAO;AACpC,QAAI,gBAAgB,qBAAqB;AACvC,uBAAiB,cAAc;eACtB,gBAAgB,YAAY;AACrC,uBAAiB,cAAc;WAC1B;AACL,uBAAiB,cAAc;;AAGjC,QAAI,WAAW,aAAa,gBAAe,KAAK,WAAW,WAAW,GAAG;AACvE,UAAM,WAAW,mBAAmB,KAAK,QAAQ,KAAK;AACtD,UAAM,OAAO,SAAS;AACtB,UAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,SAAA,GAAC;AAAI,eAAA,EAAE,SAAS,KAAK,UAAU;MAA1B,CAAqC,GAAG;AACnE,mBAAU,UAAK,KAAA,kBACT,OAAC,KAAU,UAAU,SAAA,GAAA,cAEzB,EAAA,OAAA,OAAS,SAAI,UAAA,QAAA,OAAA,SAAA,SAAO,GAAI,UAAK,KAAU,UAAS,QAAA,GAAA,6HAEmB,CAAA;;;AAIzE,QAAI,aAAa,CAAC,MAAM,KAAK,QAAQ,WAAW,SAAS,GAAG;AAE1D,uBAAiB,YAAY,KAAK,QAAQ,YAAY,SAAA,SAAA,CAAA,GACjD,KAAK,QAAQ,SAAS,GACtB,SAAS;;AAIhB,SAAK,UAAU,eAAc;AAC7B,WAAO,KAAK,UAAU,kBAAkB,cAAc,OAAO;EAC/D;AAEO,mBAAA,UAAA,YAAP,SACE,kBACqC;AAFvC,QAAA,QAAA;AAIE,QAAM,kBAAkB,SAAA,SAAA,CAAA,GAClB,iBAAiB,QAAQ,mBAAkB,SAAA,SAAA,SAAA,CAAA,GAC1C,KAAK,OAAO,GACZ,gBAAgB,GAAA,EACnB,WAAS,SAAA,SAAA,CAAA,GACJ,KAAK,QAAQ,SAAS,GACtB,iBAAiB,SAAS,EAAA,CAAA,CAE/B,GAAA,EAMF,aAAa,WAAU,CAAA;AAGzB,QAAM,MAAM,KAAK,aAAa,gBAAe;AAI7C,QAAI,gBAAgB,6BAA6B;AAC/C,WAAK,UAAU,gBAAgB,cAAc;AAC7C,WAAK,QAAO;;AAGd,WAAO,KAAK,aAAa,WACvB,KACA,iBACA,cAAc,SAAS,EACvB,KAAK,SAAA,iBAAe;AACpB,UAAM,OAAO,gBAAgB;AACrB,UAAA,cAAgB,iBAAgB;AAExC,UAAI,aAAa;AACf,YAAI,WACA,CAAC,wBAAwB;AAC3B,qBAAU,UACpB,KAAA,4iBAUmD;AACzC,mCAAyB;;AAE3B,cAAK,YAAY,SAAA,UAAQ;AAAI,iBAAA,YAAY,UAAU;YACjD,iBAAiB;YACjB,WAAW,gBAAgB;WAC5B;QAH4B,CAG3B;aACG;AAML,cAAK,aAAa,MAAM,WAAW;UACjC,OAAO,gBAAgB;UACvB,WAAW,gBAAgB;UAC3B;SACD;;AAGH,aAAO;IAET,CAAC,EAAE,QAAQ,WAAA;AACT,YAAK,aAAa,UAAU,GAAG;AAC/B,YAAK,UAAS;IAChB,CAAC;EACH;AAKO,mBAAA,UAAA,kBAAP,SAIE,SAIC;AARH,QAAA,QAAA;AAUE,QAAM,eAAe,KAAK,aACvB,yBAAyB;MACxB,OAAO,QAAQ;MACf,WAAW,QAAQ;MACnB,SAAS,QAAQ;KAClB,EACA,UAAU;MACT,MAAM,SAAC,kBAA6C;AAC1C,YAAA,cAAgB,QAAO;AAC/B,YAAI,aAAa;AACf,gBAAK,YACH,SAAC,UAAU,IAAa;gBAAX,YAAS,GAAA;AACpB,mBAAA,YAAY,UAAU;cACpB;cACA;aACD;UAHD,CAGE;;MAGV;MACA,OAAO,SAAC,KAAQ;AACd,YAAI,QAAQ,SAAS;AACnB,kBAAQ,QAAQ,GAAG;AACnB;;AAEF,mBAAU,UAAM,MAAA,wCAA6C,GAAA;MAC/D;KACD;AAEH,SAAK,cAAc,IAAI,YAAY;AAEnC,WAAO,WAAA;AACL,UAAI,MAAK,cAAc,OAAO,YAAY,GAAG;AAC3C,qBAAa,YAAW;;IAE5B;EACF;AAEO,mBAAA,UAAA,aAAP,SACE,YAAyD;AAEzD,WAAO,KAAK,UAAU,UAAU;EAClC;AAuBO,mBAAA,UAAA,eAAP,SACE,WAAqB;AAErB,QAAI,MAAM,KAAK,WAAW,SAAS,GAAG;AAIpC,aAAO,KAAK,UAAU,OAClB,KAAK,OAAM,IACX,QAAQ,QAAO;;AAGrB,SAAK,QAAQ,YAAY;AAGzB,QAAI,CAAC,KAAK,UAAU,MAAM;AACxB,aAAO,QAAQ,QAAO;;AAGxB,WAAO,KAAK,UAAU;MAEpB,aAAa,KAAK;MAClB;OACC,cAAc,YAAY;EAC/B;AAEO,mBAAA,UAAA,cAAP,SACE,OAGU;AAEF,QAAA,eAAiB,KAAI;AACrB,QAAA,SAAW,aAAa,MAAM,KAAY;MAChD,OAAO,KAAK,QAAQ;MACpB,WAAW,KAAK;MAChB,mBAAmB;MACnB,YAAY;KACb,EAAC;AAEF,QAAM,YAAY,MAAM,QAAS;MAC/B,WAAY,KAAa;KAC1B;AAED,QAAI,WAAW;AACb,mBAAa,MAAM,WAAW;QAC5B,OAAO,KAAK,QAAQ;QACpB,MAAM;QACN,WAAW,KAAK;OACjB;AAED,mBAAa,iBAAgB;;EAEjC;AAEO,mBAAA,UAAA,eAAP,SAAoB,cAAoB;AACtC,SAAK,QAAQ,eAAe;AAC5B,SAAK,cAAa;EACpB;AAEO,mBAAA,UAAA,cAAP,WAAA;AACE,SAAK,QAAQ,eAAe;AAC5B,SAAK,cAAa;EACpB;AAEQ,mBAAA,UAAA,QAAR,SACE,SACA,kBAAgC;AAEhC,SAAK,aAAa,mBAAmB,IAAI;AACzC,WAAO,KAAK,aAAa,qBACvB,KAAK,SACL,SACA,gBAAgB;EAEpB;AAGQ,mBAAA,UAAA,gBAAR,WAAA;AAAA,QAAA,QAAA;AAEE,QAAI,KAAK,aAAa,SAAS;AAC7B;;AAGI,QAAA,KAKF,MAJF,cAAW,GAAA,aAET,eAAY,GAAA,QAAA;AAIhB,QAAI,CAAC,cAAc;AACjB,UAAI,aAAa;AACf,qBAAa,YAAY,OAAO;AAChC,eAAO,KAAK;;AAEd;;AAGF,QAAI,eACA,YAAY,aAAa,cAAc;AACzC;;AAGF,cACE,UAAA,cACA,gEACA,IAAA,UAAA,cAAA,EAAA;AAEF,QAAM,OAAO,eAAgB,MAAK,cAAc,CAAA;AAChD,SAAK,WAAW;AAEhB,QAAM,aAAa,WAAA;AACjB,UAAI,MAAK,aAAa;AACpB,YAAI,CAAC,yBAAyB,MAAK,UAAU,aAAa,GAAG;AAC3D,gBAAK,UAAU;YACb,aAAa;aACZ,cAAc,IAAI,EAAE,KAAK,MAAM,IAAI;eACjC;AACL,eAAI;;;AAEP;IACH;AAEA,QAAM,OAAO,WAAA;AACX,UAAM,QAAO,MAAK;AAClB,UAAI,OAAM;AACR,qBAAa,MAAK,OAAO;AACzB,cAAK,UAAU,WAAW,YAAY,MAAK,QAAQ;;IAEvD;AAEA,SAAI;EACN;AAEQ,mBAAA,UAAA,mBAAR,SACE,WACA,WAA0B;AAA1B,QAAA,cAAA,QAAA;AAAA,kBAAY,KAAK;IAAS;AAE1B,SAAK,OAAI,SAAA,SAAA,CAAA,GACJ,KAAK,IAAI,GAAA,EACZ,QAAQ,KAAK,aAAa,yBACtB,YACA,UAAU,SAAS,GACvB,UAAS,CAAA;AAEX,QAAI,CAAC,gBAAgB,UAAU,MAAM,GAAG;AACtC,aAAO,KAAK,KAAK;;AAEnB,WAAO,KAAK;EACd;AAEO,mBAAA,UAAA,YAAP,SACE,YACA,kBAAgC;AAFlC,QAAA,QAAA;AAIE,SAAK,aAAa;AAElB,QAAM,uBAIJ,qBAAqB,cAAc,WAGnC,qBAAqB,cAAc,aAGnC,qBAAqB,cAAc;AAGrC,QAAM,eAAe,KAAK,QAAQ;AAElC,QAAM,UAAU,uBAGZ,QAAQ,KAAK,SAAS,UAAU,IAChC,OAAO,KAAK,SAAS,QAAQ,UAAU,CAAC;AAE5C,QAAI,CAAC,sBAAsB;AAEzB,WAAK,cAAa;AAIlB,UACE,cACA,WAAW,aACX,CAAC,WAAW,eACZ,CAAC,MAAM,WAAW,WAAW,YAAY,GACzC;AACA,gBAAQ,cAAc,KAAK;AAC3B,YAAI,qBAAqB,QAAQ;AAC/B,6BAAmB,cAAc;;;;AAKvC,QAAM,YAAY,QAAQ,aAAS,SAAA,CAAA,GAAS,QAAQ,SAAS;AAC7D,QAAM,UAAU,KAAK,MAAM,SAAS,gBAAgB;AACpD,QAAM,WAA+C;MACnD,MAAM,SAAA,QAAM;AACV,cAAK,aAAa,QAAQ,SAAS;MACrC;MACA,OAAO,SAAA,OAAK;AACV,cAAK,YAAY,OAAO,SAAS;MACnC;;AAGF,QAAI,CAAC,sBAAsB;AAMzB,UAAI,KAAK,WAAW,KAAK,UAAU;AACjC,aAAK,QAAQ,eAAe,KAAK,UAAU,IAAI;;AAGjD,WAAK,UAAU;AACf,WAAK,WAAW;;AAGlB,YAAQ,YAAY,QAAQ;AAE5B,WAAO,QAAQ;EACjB;AAIQ,mBAAA,UAAA,UAAR,WAAA;AAKE,SAAK,aACH,KAAK,iBAAiB,KAAK,GAC3B,KAAK,SAAS;EAElB;AAEQ,mBAAA,UAAA,eAAR,SACE,QACA,WAAiC;AAEjC,QAAM,YAAY,KAAK,aAAY;AACnC,QAAI,aAAa,KAAK,0BAA0B,MAAM,GAAG;AACvD,UAAI,aAAa,CAAC,OAAO,WAAW,KAAK,QAAQ,mBAAmB;AAClE,aAAK,iBAAiB,QAAQ,SAAS;;AAGzC,6BAAuB,KAAK,WAAW,QAAQ,MAAM;;EAEzD;AAEQ,mBAAA,UAAA,cAAR,SACE,OACA,WAAiC;AAIjC,QAAM,cAAc,SAAA,SAAA,CAAA,GACf,KAAK,cAAa,CAAE,GAAA,EACvB,OACA,QAAQ,MAAM,eACd,eAAe,cAAc,OAC7B,SAAS,MAAK,CAAA;AAGhB,SAAK,iBAAiB,aAAa,SAAS;AAE5C,2BAAuB,KAAK,WAAW,SAAS,KAAK,KAAM,QAAQ,KAAK;EAC1E;AAEO,mBAAA,UAAA,eAAP,WAAA;AACE,WAAO,KAAK,UAAU,OAAO;EAC/B;AAEQ,mBAAA,UAAA,gBAAR,WAAA;AACE,QAAI,KAAK;AAAY;AACrB,QAAI,KAAK,WAAW,KAAK,UAAU;AACjC,WAAK,QAAQ,eAAe,KAAK,QAAQ;AACzC,aAAO,KAAK;AACZ,aAAO,KAAK;;AAGd,SAAK,YAAW;AAEhB,SAAK,cAAc,QAAQ,SAAA,KAAG;AAAI,aAAA,IAAI,YAAW;IAAf,CAAiB;AACnD,SAAK,cAAc,MAAK;AACxB,SAAK,aAAa,UAAU,KAAK,OAAO;AACxC,SAAK,UAAU,MAAK;AACpB,SAAK,aAAa;EACpB;AACF,SAAA;AAAA,EA9uBU,UAAU;AAkvBpB,sBAAsB,eAAe;AAErC,kDAAkD,OAAkB;AAClE,aAAU,UAAM,MAAA,mBAAyB,MAAS,SAAW,MAAE,KAAA;AACjE;AAEM,+BACJ,SAAsD;AAEtD,MAAI,WAAW,SAAS;AACtB,eAAU,UAAM,MAAA,gCACV,OAAC,KAAU,UACb,OAAO,CAAC,GAAC,OAAA;;AAEjB;AAMM,8BACJ,SAIC;AAGC,MAAA,KAEE,QAAO,aAFT,cAAW,OAAA,SAAG,gBAAa,IAC3B,kBACE,QAAO;AAEX,MAAI,iBAAiB;AAWnB,YAAQ,cAAc,OAAO,oBAAoB,aAC7C,gBAAgB,KAAK,SAAS,WAAW,IACzC;;AAER;;;ACxxBA,IAAA,aAAA,WAAA;AAME,uBAAY,IAKqB;QAJ/B,SAAK,GAAA,OACL,SAAM,GAAA,QACN,YAAS,GAAA,WACT,kBAAe,GAAA;AAEf,SAAK,QAAQ;AAEb,QAAI,QAAQ;AACV,WAAK,SAAS;;AAGhB,QAAI,WAAW;AACb,WAAK,aAAa,SAAS;;AAG7B,QAAI,iBAAiB;AACnB,WAAK,mBAAmB,eAAe;;EAE3C;AAEO,cAAA,UAAA,eAAP,SAAoB,WAAkC;AAAtD,QAAA,QAAA;AACE,SAAK,YAAY,KAAK,aAAa,CAAA;AACnC,QAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,gBAAU,QAAQ,SAAA,eAAa;AAC7B,cAAK,YAAY,UAAU,MAAK,WAAW,aAAa;MAC1D,CAAC;WACI;AACL,WAAK,YAAY,UAAU,KAAK,WAAW,SAAS;;EAExD;AAEO,cAAA,UAAA,eAAP,SAAoB,WAAkC;AACpD,SAAK,YAAY,CAAA;AACjB,SAAK,aAAa,SAAS;EAC7B;AAEO,cAAA,UAAA,eAAP,WAAA;AACE,WAAO,KAAK,aAAa,CAAA;EAC3B;AAMa,cAAA,UAAA,eAAb,SAAiC,IAYhC;QAXC,WAAQ,GAAA,UACR,eAAY,GAAA,cACZ,UAAO,GAAA,SACP,YAAS,GAAA,WACT,KAAA,GAAA,wBAAA,yBAAsB,OAAA,SAAG,QAAK;;;AAQ9B,YAAI,UAAU;AACZ,iBAAA,CAAA,GAAO,KAAK,gBACV,UACA,aAAa,MACb,SACA,WACA,KAAK,iBACL,sBAAsB,EACtB,KAAK,SAAA,aAAW;AAAI,mBAAA,SAAA,SAAA,CAAA,GACjB,YAAY,GAAA,EACf,MAAM,YAAY,OAAM,CAAA;UAFJ,CAGpB,CAAC;;AAGL,eAAA,CAAA,GAAO,YAAY;;;;AAGd,cAAA,UAAA,qBAAP,SAA0B,iBAAgC;AACxD,SAAK,kBAAkB;EACzB;AAEO,cAAA,UAAA,qBAAP,WAAA;AACE,WAAO,KAAK;EACd;AAIO,cAAA,UAAA,cAAP,SAAmB,UAAsB;AACvC,QAAI,cAAc,CAAC,QAAQ,GAAG,QAAQ,GAAG;AACvC,UAAI,KAAK,WAAW;AAClB,eAAO;;;AAGX,WAAO;EACT;AAGO,cAAA,UAAA,cAAP,SAAmB,UAAsB;AACvC,WAAO,6BAA6B,QAAQ;EAC9C;AAEO,cAAA,UAAA,iBAAP,SAAsB,SAA6B;AACzC,QAAA,SAAU,KAAI;AACtB,WAAA,SAAA,SAAA,CAAA,GACK,OAAO,GAAA,EACV,OAAK,QAEL,aAAA,SAAY,KAAgB;AAC1B,aAAO,OAAM,SAAS,GAAG;IAC3B,EAAC,CAAA;EAEL;AAKa,cAAA,UAAA,uBAAb,SACE,UACA,WACA,SAAY;AADZ,QAAA,cAAA,QAAA;AAAA,kBAAA,CAAA;IAAkC;AAClC,QAAA,YAAA,QAAA;AAAA,gBAAA,CAAA;IAAY;;;AAEZ,YAAI,UAAU;AACZ,iBAAA,CAAA,GAAO,KAAK,gBACV,UACA,KAAK,wBAAwB,UAAU,SAAS,KAAK,CAAA,GACrD,KAAK,eAAe,OAAO,GAC3B,SAAS,EACT,KAAK,SAAA,MAAI;AAAI,mBAAA,SAAA,SAAA,CAAA,GACV,SAAS,GACT,KAAK,iBAAiB;UAFZ,CAGb,CAAC;;AAGL,eAAA,CAAA,GAAA,SAAA,CAAA,GACK,SAAS,CAAA;;;;AAIT,cAAA,UAAA,uBAAP,SAA4B,UAAiB;AAC3C,QAAI,iBAAiB;AACrB,UAAM,UAAU;MACd,WAAW;QACT,OAAK,SAAC,MAAI;AACR,cAAI,KAAK,KAAK,UAAU,YAAY,KAAK,WAAW;AAClD,6BAAiB,KAAK,UAAU,KAC9B,SAAA,KAAG;AACD,qBAAA,IAAI,KAAK,UAAU,YACnB,IAAI,MAAM,SAAS,kBACnB,IAAI,MAAM,UAAU;YAFpB,CAEwB;AAE5B,gBAAI,gBAAgB;AAClB,qBAAO;;;QAGb;;KAEH;AACD,WAAO;EACT;AAGQ,cAAA,UAAA,0BAAR,SACE,UACA,WAA+B;AAE/B,WAAO,KAAK,MAAM,KAAK;MACrB,OAAO,2BAA2B,QAAQ;MAC1C;MACA,mBAAmB;MACnB,YAAY;KACb,EAAE;EACL;AAEc,cAAA,UAAA,kBAAd,SACE,UACA,WACA,SACA,WACA,iBACA,wBAAuC;AAHvC,QAAA,YAAA,QAAA;AAAA,gBAAA,CAAA;IAAiB;AACjB,QAAA,cAAA,QAAA;AAAA,kBAAA,CAAA;IAA2B;AAC3B,QAAA,oBAAA,QAAA;AAAA,wBAAA,WAAA;AAAyC,eAAA;MAAA;IAAI;AAC7C,QAAA,2BAAA,QAAA;AAAA,+BAAA;IAAuC;;;;AAEjC,yBAAiB,kBAAkB,QAAQ;AAC3C,oBAAY,uBAAuB,QAAQ;AAC3C,sBAAc,kBAAkB,SAAS;AAEzC,8BAAuB,eAC1B;AAEG,+BAAuB,sBACzB,oBAAoB,OAAO,CAAC,EAAE,YAAW,IACzC,oBAAoB,MAAM,CAAC,IAC3B;AAEE,aAAoB,MAAlB,SAAK,GAAA,OAAE,SAAM,GAAA;AACf,sBAA2B;UAC/B;UACA,SAAO,SAAA,SAAA,CAAA,GACF,OAAO,GAAA,EACV,OAAK,QACL,OAAM,CAAA;UAER;UACA;UACA;UACA,mBAAmB,CAAA;UACnB;;AAGF,eAAA,CAAA,GAAO,KAAK,oBACV,eAAe,cACf,WACA,WAAW,EACX,KAAK,SAAA,QAAM;AAAI,iBAAC;YAChB;YACA,mBAAmB,YAAY;;QAFhB,CAGf,CAAC;;;;AAGS,cAAA,UAAA,sBAAd,SACE,cACA,WACA,aAAwB;;;;;AAEhB,sBAAoC,YAAW,aAAlC,UAAuB,YAAW,SAAzB,YAAc,YAAW;AACjD,yBAA0B,CAAC,SAAS;AAEpC,mBAAU,SAAO,WAAwB;AAAA,iBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;AAC7C,kBAAI,CAAC,cAAc,WAAW,SAAS,GAAG;AAExC,uBAAA,CAAA,CAAA;;AAGF,kBAAI,QAAQ,SAAS,GAAG;AACtB,uBAAA,CAAA,GAAO,KAAK,aAAa,WAAW,WAAW,WAAW,EAAE,KAC1D,SAAA,aAAW;;AACT,sBAAI,OAAO,gBAAgB,aAAa;AACtC,mCAAe,KAAK,OAAA,CAAA,GAClB,IAAC,uBAAuB,SAAS,KAAI,iBAC7B;;gBAEd,CAAC,CACF;;AAKH,kBAAI,iBAAiB,SAAS,GAAG;AAC/B,2BAAW;qBACN;AAEL,2BAAW,YAAY,UAAU,KAAK;AACtC,0BAAU,UAAU,UAAA,qBAAqB,OAAU,UAAU,KAAI,KAAA,CAAA,IAAA,UAAA,UAAA,CAAA;;AAGnE,kBAAI,YAAY,SAAS,eAAe;AAChC,gCAAgB,SAAS,cAAc,KAAK;AAClD,oBAAI,YAAY,gBAAgB,WAAW,eAAe,OAAO,GAAG;AAClE,yBAAA,CAAA,GAAO,KAAK,oBACV,SAAS,cACT,WACA,WAAW,EACX,KAAK,SAAA,gBAAc;AACnB,mCAAe,KAAK,cAAc;kBACpC,CAAC,CAAC;;;;;;;AAKR,eAAA,CAAA,GAAO,QAAQ,IAAI,aAAa,WAAW,IAAI,QAAO,CAAC,EAAE,KAAK,WAAA;AAC5D,iBAAO,eAAe,cAAc;QACtC,CAAC,CAAC;;;;AAGU,cAAA,UAAA,eAAd,SACE,OACA,WACA,aAAwB;;;;;AAEhB,oBAAc,YAAW;AAC3B,oBAAY,MAAM,KAAK;AACvB,2BAAmB,uBAAuB,KAAK;AAC/C,oBAAY,cAAc;AAC1B,wBAAgB,UAAU,qBAAqB,UAAU;AAC3D,wBAAgB,QAAQ,QAAQ,aAAa;AAMjD,YACE,CAAC,YAAY,0BACb,KAAK,qBAAqB,KAAK,GAC/B;AACM,yBACJ,UAAU,cAAc,YAAY;AAChC,wBAAc,KAAK,aAAa,KAAK,UAAU;AACrD,cAAI,aAAa;AACT,sBAAU,YAAY,YAAY,YAAY;AACpD,gBAAI,SAAS;AACX,8BAAgB,QAAQ,QAGtB,UAAU,UAAU,KAAK,OAAO,SAAS;gBACvC;gBACA,yBAAyB,OAAO,SAAS;gBACzC,YAAY;gBACZ,EAAE,OAAO,aAAa,YAAY,YAAW;eAC9C,CAAC;;;;AAMV,eAAA,CAAA,GAAO,cAAc,KAAK,SAAC,QAAsB;AAAtB,cAAA,WAAA,QAAA;AAAA,qBAAA;UAAsB;AAG/C,cAAI,MAAM,YAAY;AACpB,kBAAM,WAAW,QAAQ,SAAA,WAAS;AAChC,kBAAI,UAAU,KAAK,UAAU,YAAY,UAAU,WAAW;AAC5D,0BAAU,UAAU,QAAQ,SAAA,KAAG;AAC7B,sBAAI,IAAI,KAAK,UAAU,QAAQ,IAAI,MAAM,SAAS,eAAe;AAC/D,gCAAY,kBAAkB,IAAI,MAAM,SAAS;;gBAErD,CAAC;;YAEL,CAAC;;AAIH,cAAI,CAAC,MAAM,cAAc;AACvB,mBAAO;;AAKT,cAAI,UAAU,MAAM;AAElB,mBAAO;;AAGT,cAAI,MAAM,QAAQ,MAAM,GAAG;AACzB,mBAAO,MAAK,wBAAwB,OAAO,QAAQ,WAAW;;AAIhE,cAAI,MAAM,cAAc;AACtB,mBAAO,MAAK,oBACV,MAAM,cACN,QACA,WAAW;;QAGjB,CAAC,CAAC;;;;AAGI,cAAA,UAAA,0BAAR,SACE,OACA,QACA,aAAwB;AAH1B,QAAA,QAAA;AAKE,WAAO,QAAQ,IACb,OAAO,IAAI,SAAA,MAAI;AACb,UAAI,SAAS,MAAM;AACjB,eAAO;;AAIT,UAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,eAAO,MAAK,wBAAwB,OAAO,MAAM,WAAW;;AAI9D,UAAI,MAAM,cAAc;AACtB,eAAO,MAAK,oBAAoB,MAAM,cAAc,MAAM,WAAW;;IAEzE,CAAC,CAAC;EAEN;AACF,SAAA;AAAA,EA9XA;;;ACvCA,IAAM,0BAA0B,IAC9B,iBAAgB,UAAU,KAC3B;AAED,oCACE,QACA,YAAkC;AAElC,MAAM,WAAW,OAAM;AACvB,MAAI,OAAO,aAAa,YAAY;AAClC,WAAM,cAAc,WAAA;AAClB,8BAAwB,IACtB,QAKC,yBAAwB,IAAI,MAAK,IAAK,KAAK,IAAI;AAElD,aAAO,SAAS,MAAM,MAAM,SAAS;IACvC;;AAEJ;AAEA,6BAA6B,MAAe;AAC1C,MAAI,KAAK,kBAAkB;AACzB,iBAAa,KAAK,gBAAgB;AAClC,SAAK,mBAAmB;;AAE5B;AAcA,IAAA,YAAA,WAAA;AAaE,sBACE,cACgB,SAAwC;AAAxC,QAAA,YAAA,QAAA;AAAA,gBAAU,aAAa,gBAAe;IAAE;AAAxC,SAAA,UAAA;AAdlB,SAAA,YAAY,oBAAI,IAAG;AACnB,SAAA,WAAgC;AAChC,SAAA,gBAAgB;AAChB,SAAA,gBAAgB,oBAAI,IAAG;AAKvB,SAAA,UAAU;AA+DF,SAAA,QAAiB;AAmET,SAAA,kBAA+C;AA1H7D,QAAM,SAAQ,KAAK,QAAQ,aAAa;AAOxC,QAAI,CAAC,wBAAwB,IAAI,MAAK,GAAG;AACvC,8BAAwB,IAAI,QAAO,CAAC;AACpC,iCAA2B,QAAO,OAAO;AACzC,iCAA2B,QAAO,QAAQ;AAC1C,iCAA2B,QAAO,OAAO;;EAE7C;AAEO,aAAA,UAAA,OAAP,SAAY,OASX;AACC,QAAI,gBAAgB,MAAM,iBAAiB,cAAc;AACzD,QAAI,KAAK,aACL,KAAK,kBAAkB,cAAc,WACrC,CAAC,MAAM,KAAK,WAAW,MAAM,SAAS,GAAG;AAC3C,sBAAgB,cAAc;;AAGhC,QAAI,CAAC,MAAM,MAAM,WAAW,KAAK,SAAS,GAAG;AAC3C,WAAK,WAAW;;AAGlB,WAAO,OAAO,MAAM;MAClB,UAAU,MAAM;MAChB,WAAW,MAAM;MACjB,cAAc;MACd,eAAe,KAAK,iBAAiB,CAAA;MACrC;KACD;AAED,QAAI,MAAM,iBAAiB;AACzB,WAAK,mBAAmB,MAAM,eAAe;;AAG/C,QAAI,MAAM,eAAe;AACvB,WAAK,gBAAgB,MAAM;;AAG7B,WAAO;EACT;AAMA,aAAA,UAAA,QAAA,WAAA;AACE,wBAAoB,IAAI;AACxB,SAAK,WAAW;AAChB,SAAK,QAAQ;EACf;AAEA,aAAA,UAAA,UAAA,SAAQ,WAA0B;AAA1B,QAAA,cAAA,QAAA;AAAA,kBAAY,KAAK;IAAS;AAChC,QAAM,UAAU,KAAK,eAAe,SAAS;AAE7C,QAAI,KAAK,YAAY,MAAM,SAAS,KAAK,SAAS,OAAO,GAAG;AAC1D,aAAO,KAAK,SAAS;;AAGvB,SAAK,YAAY,KAAK,YAAY,SAAS;AAE3C,QAAM,KAAK,KAAK;AAChB,QAAI,MAAM,GAAG,QAAQ,gBAAgB,YAAY;AAC/C,aAAO,EAAE,UAAU,MAAK;;AAG1B,QAAM,OAAO,KAAK,MAAM,KAAK,OAAO;AACpC,SAAK,eAAe,MAAM,OAAO;AACjC,WAAO;EACT;AAOQ,aAAA,UAAA,iBAAR,SACE,MACA,SAA2B;AAE3B,SAAK,WAAW,OAAO;MACrB;MACA,SAAS,WAAW,KAAK,eAAc;QACrC;EACN;AAEQ,aAAA,UAAA,iBAAR,SAAuB,WAA0B;;AAA1B,QAAA,cAAA,QAAA;AAAA,kBAAY,KAAK;IAAS;AAC/C,WAAO;MACL,OAAO,KAAK;MACZ;MACA,mBAAmB;MACnB,YAAY;MACZ,iBAAiB,MAAA,KAAK,qBAAe,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;;EAEnD;AAEA,aAAA,UAAA,UAAA,SAAQ,MAAkC;AAA1C,QAAA,QAAA;AACE,QAAM,UAAU,KAAK,YAAY,KAAK,SAAS;AAC/C,SAAK,eAAe,IAAI;AACxB,QAAI,CAAC,KAAK,SACN,CAAC,MAAM,WAAW,QAAQ,QACnB,QAAQ,KAAK,MAAM,GAAG;AAC/B,WAAK,QAAQ;AACb,UAAI,CAAC,KAAK,eAAe;AACvB,aAAK,gBAAgB,WAAW,WAAA;AAAM,iBAAA,MAAK,OAAM;QAAX,GAAe,CAAC;;;EAG5D;AAKA,aAAA,UAAA,qBAAA,SAAmB,IAA+B;AAAlD,QAAA,QAAA;AACE,QAAI,OAAO,KAAK;AAAiB;AAEjC,QAAI,KAAK,YAAY;AACnB,WAAK,UAAU,OAAO,KAAK,UAAU;;AAGtC,SAAa,kBAAkB;AAEhC,QAAI,IAAI;AACN,SAAG,eAAe;AAClB,WAAK,UAAU,IAAI,KAAK,aAAa,WAAA;AAMnC,YAAI,MAAK,QAAO,EAAG,2BAA2B;AAC5C,aAAG,WAAU;eACR;AACL,aAAG,UAAS;;MAEhB,CAAC;WACI;AACL,aAAO,KAAK;;EAEhB;AAEA,aAAA,UAAA,SAAA,WAAA;AAAA,QAAA,QAAA;AACE,wBAAoB,IAAI;AAExB,QAAI,KAAK,aAAY,GAAI;AACvB,WAAK,UAAU,QAAQ,SAAA,UAAQ;AAAI,eAAA,SAAS,KAAI;MAAb,CAAc;;AAGnD,SAAK,QAAQ;EACf;AAEQ,aAAA,UAAA,eAAR,WAAA;AACE,QAAI,CAAC,KAAK,SAAS,CAAC,KAAK,UAAU,MAAM;AACvC,aAAO;;AAGT,QAAI,yBAAyB,KAAK,aAAa,KAC3C,KAAK,iBAAiB;AAChB,UAAA,cAAgB,KAAK,gBAAgB,QAAO;AACpD,UAAI,gBAAgB,gBAChB,gBAAgB,qBAAqB;AACvC,eAAO;;;AAIX,WAAO;EACT;AAEO,aAAA,UAAA,OAAP,WAAA;AACE,QAAI,CAAC,KAAK,SAAS;AACjB,WAAK,UAAU;AAGf,WAAK,MAAK;AAEV,WAAK,OAAM;AAGX,WAAK,SAAS,WAAU,UAAU;AAElC,WAAK,cAAc,QAAQ,SAAA,KAAG;AAAI,eAAA,IAAI,YAAW;MAAf,CAAiB;AAEnD,UAAM,KAAK,KAAK;AAChB,UAAI;AAAI,WAAG,YAAW;;EAE1B;AAIQ,aAAA,UAAA,SAAR,WAAA;EAAkB;AAIV,aAAA,UAAA,cAAR,SAAoB,WAA0B;AAA9C,QAAA,QAAA;AAAoB,QAAA,cAAA,QAAA;AAAA,kBAAY,KAAK;IAAS;AAC5C,QAAM,KAAK,KAAK;AAChB,QAAI,MAAM,GAAG,QAAQ,gBAAgB,YAAY;AAC/C;;AAGF,QAAM,eAAY,SAAA,SAAA,CAAA,GAIb,KAAK,eAAe,SAAS,CAAC,GAAA,EACjC,SAAS,MACT,UAAU,SAAA,MAAI;AAAI,aAAA,MAAK,QAAQ,IAAI;IAAjB,EAAkB,CAAA;AAGtC,QAAI,CAAC,KAAK,aACN,CAAC,MAAM,cAAc,KAAK,SAAS,GAAG;AACxC,WAAK,OAAM;AACX,WAAK,SAAS,KAAK,MAAM,MAAM,KAAK,YAAY,YAAY;;EAEhE;AAQO,aAAA,UAAA,iBAAP,WAAA;AACE,SAAK,YAAY;EACnB;AAEQ,aAAA,UAAA,cAAR,SACE,QACA,WAAyC;AAEjC,QAAA,YAAc,KAAI;AAC1B,WAAO,CACL,cAIA,UAAU,YAAY,wBAAwB,IAAI,KAAK,KAAK,KAC5D,MAAM,WAAW,UAAU,SAAS,KACpC,MAAM,OAAO,MAAM,UAAU,OAAO,IAAI;EAE5C;AAEO,aAAA,UAAA,aAAP,SACE,QACA,SAIA,oBAAsC;AANxC,QAAA,QAAA;AAQE,SAAK,gBAAgB,gBAAgB,OAAO,MAAM,IAAI,OAAO,SAAS,CAAA;AAItE,SAAK,MAAK;AAEV,QAAI,QAAQ,gBAAgB,YAAY;AACtC,WAAK,eACH,EAAE,QAAQ,OAAO,MAAM,UAAU,KAAI,GACrC,KAAK,eAAe,QAAQ,SAAS,CAAC;eAG/B,uBAAkB,GAAgC;AAC3D,UAAI,kBAAkB,QAAQ,QAAQ,WAAW,GAAG;AAKlD,aAAK,MAAM,mBAAmB,SAAA,QAAK;AACjC,cAAI,MAAK,YAAY,QAAQ,QAAQ,SAAS,GAAG;AAC/C,mBAAM,WAAW;cACf,OAAO,MAAK;cACZ,MAAM,OAAO;cACb,WAAW,QAAQ;cACnB,WAAW,uBAAkB;aAC9B;AAED,kBAAK,YAAY;cACf;cACA,WAAW,QAAQ;cACnB,SAAS,wBAAwB,IAAI,MAAK,KAAK;;iBAE5C;AAiCL,gBAAI,MAAK,YACL,MAAK,SAAS,KAAK,UAAU;AAG/B,qBAAO,OAAO,MAAK,SAAS,KAAK;AACjC;;;AAMJ,cAAM,cAAc,MAAK,eAAe,QAAQ,SAAS;AACzD,cAAM,OAAO,OAAM,KAAQ,WAAW;AAKtC,cAAI,CAAC,MAAK,SAAS;AAGjB,kBAAK,YAAY,QAAQ,SAAS;;AAQpC,gBAAK,eAAe,MAAM,WAAW;AACrC,cAAI,KAAK,UAAU;AACjB,mBAAO,OAAO,KAAK;;QAEvB,CAAC;aACI;AACL,aAAK,YAAY;;;EAGvB;AAEO,aAAA,UAAA,YAAP,WAAA;AACE,SAAK,eAAe;AACpB,WAAO,KAAK,gBAAgB,cAAc;EAC5C;AAEO,aAAA,UAAA,YAAP,SAAiB,OAAkB;AACjC,SAAK,gBAAgB,cAAc;AACnC,SAAK,YAAY;AAEjB,SAAK,MAAK;AAEV,QAAI,MAAM,eAAe;AACvB,WAAK,gBAAgB,MAAM;;AAG7B,QAAI,MAAM,cAAc;AACtB,WAAK,eAAe,MAAM;;AAG5B,WAAO;EACT;AACF,SAAA;AAAA,EAnZA;AAqZM,2BACJ,QACA,aAAiC;AAAjC,MAAA,gBAAA,QAAA;AAAA,kBAAA;EAAiC;AAEjC,MAAM,eACJ,gBAAgB,YAChB,gBAAgB;AAClB,MAAI,kBAAkB,CAAC,sBAAsB,MAAM;AACnD,MAAI,CAAC,mBAAmB,gBAAgB,OAAO,MAAM;AACnD,sBAAkB;;AAEpB,SAAO;AACT;;;ACnbQ,IAAA,kBAAmB,OAAO,UAAS;AAqB3C,IAAA,eAAA,WAAA;AAuBE,yBAAY,IAkBX;QAjBC,SAAK,GAAA,OACL,OAAI,GAAA,MACJ,KAAA,GAAA,oBAAA,qBAAkB,OAAA,SAAG,QAAK,IAC1B,cAAW,GAAA,aACX,KAAA,GAAA,SAAA,UAAO,OAAA,SAAG,QAAK,IACf,KAAA,GAAA,iBAAA,kBAAe,OAAA,SAAG,CAAA,IAAE,IACpB,aAAU,GAAA,YACV,yBAAsB,GAAA;AAxBhB,SAAA,kBAA0C,CAAA;AAU1C,SAAA,UAAU,oBAAI,IAAG;AAIjB,SAAA,iBAAiB,oBAAI,IAAG;AA0bxB,SAAA,iBAAiB,IACvB,iBAAgB,UAAU,KAC3B;AAkIO,SAAA,iBAAiB;AAKjB,SAAA,mBAAmB;AAKnB,SAAA,oBAAoB;AA2PpB,SAAA,0BAA0B,oBAAI,IAAG;AA9yBvC,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,qBAAqB;AAC1B,SAAK,kBAAkB;AACvB,SAAK,aAAa,cAAc,IAAI,WAAW,EAAE,OAAK,OAAA,CAAE;AACxD,SAAK,UAAU;AACf,SAAK,yBAAyB,CAAC,CAAC;AAChC,QAAK,KAAK,cAAc,aAAc;AACpC,WAAK,gBAAgB,uBAAO,OAAO,IAAI;;EAE3C;AAMO,gBAAA,UAAA,OAAP,WAAA;AAAA,QAAA,QAAA;AACE,SAAK,QAAQ,QAAQ,SAAC,OAAO,SAAO;AAClC,YAAK,qBAAqB,OAAO;IACnC,CAAC;AAED,SAAK,qBACH,UAAI,IAAA,eAAe,gDACnB,IAAA,IAAA,eAAA,EAAA,CAAA;EACJ;AAEQ,gBAAA,UAAA,uBAAR,SAA6B,OAAY;AACvC,SAAK,eAAe,QAAQ,SAAA,QAAM;AAAI,aAAA,OAAO,KAAK;IAAZ,CAAa;AACnD,SAAK,eAAe,MAAK;EAC3B;AAEa,gBAAA,UAAA,SAAb,SAKE,IAa6C;QAZ7C,WAAQ,GAAA,UACR,YAAS,GAAA,WACT,qBAAkB,GAAA,oBAClB,gBAAa,GAAA,eACb,KAAA,GAAA,gBAAA,iBAAc,OAAA,SAAG,CAAA,IAAE,IACnB,KAAA,GAAA,qBAAA,sBAAmB,OAAA,SAAG,QAAK,IACnB,oBAAiB,GAAA,QACzB,iBAAc,GAAA,gBACd,KAAA,GAAA,aAAA,cAAW,OAAA,SAAG,SAAM,IACpB,KAAA,GAAA,aAAA,cAAW,OAAA,SAAG,iBAAc,IAC5B,iBAAc,GAAA,gBACd,UAAO,GAAA;;;;;;AAEP,sBACE,UACA,UAAA,6FACA,IAAA,UAAA,UAAA,EAAA;AAEF,sBACE,UAAA,gBAAgB,kBAChB,gBAAgB,YAChB,4MAA4M,IAC5M,UAAA,gBAAA,kBAEI,gBAAkB,YAAA,EAAA;AACxB,yBAAW,KAAK,mBAAoB;AAEpC,uBAAS,KAAO,UAAC,QAAa,EAAA;wBAErB,KAAA,aAAoB,UAAA,SAAzB;AACU,gBAAA,CAAA,KAAA,UAAW,QAAW,EAAA;AAAqB,qBAAA,CAAQ,GAAE,CAAA;;eAAjE;;;eAGI;iCAEE,KAAc,uBAClB,cAAQ,cAAA;cACR;cACA;cACA,SAAO;cACgB,OAAA;YAEvB;gBACF,oBAAK;mBAMH,uBAAU,oBAAA;gBACV;gBACA,UAAS;gBACT;gBACA;gBACA;gBACA;gBACA;gBACA,QAAA;gBACC;cACJ,CAAA;YAED;AAEM,iBAAI,iBAAQ;AAElB,mBAAA;oBACE,GAAA,IAAO,QAAQ,SACR,SAAA,QAAqB;qBAWxB,SAAI,KAAA,sBAAiC,UAAW,SAAK,SAAQ,CAAA,GAAA,OAAA,GAAA,EAAA,mBAAA,CAAA,GAAA,WAAA,KAAA,GAAA,SAAA,QAAA;oBAC3D,sBAAsB,MAAA,KAAA,gBAAA,QAAA;wBACpB,IAAA,YAAe;oBACd,eAAA,OAAA;kBACJ,CAAA;gBAED;oBACE,oBAAmB;AACnB,qCAAmB,UAAQ;AAC5B,qCAAA,QAAA;gBAED;AAEA,oBAAI,cAAO,SAAc,CAAA,GAAK,MAAA;oBAC5B,OAAA,mBAAiB,YAAe;AACjC,mCAAA,eAAA,WAAA;gBAED;oBACI,gBAAA,YACF,sBAAmB,WAAO,GAAA;AAC3B,yBAAA,YAAA;gBAED;uBAME,KAAA,mBAAU;kBACV;kBACA,QAAQ;kBACR,UAAS;kBACT;kBACA;kBACA;kBACA;kBACA,QAAA;kBACA;kBACA;kBACA;kBACA,kBAAc,qBAAA,aAAA;kBACd;kBACC;gBAGL,CAAA;2BACI;sBACF,SAAK,aAAmB;AAQxB,uBAAA,iBAAqB;AACtB,0BAAA,WAAA;gBAED;uBACE,SAAI,KAAA;sBACF,oBAAmB;AACnB,uCAAmB,UAAQ;AAC5B,uCAAA,QAAA;kBAED;sBACE,oBAAW;AACZ,yBAAA,MAAA,iBAAA,UAAA;kBAED;AAEA,uBAAA,iBACiB;yBACb,eAAiB,cAAA,MAAA,IAAA,YAAA;oBAEnB,cAAA;kBACH,CAAA,CAAA;gBACA;cACF,CAAA;;;;IACJ,CAAA;EAEM;gBAAP,UAiKC,qBAAA,SAAA,UAAA,QAAA;AA3IC,QAAA,QAAA;AAEM,QAAA,WAAW,QAAQ;AAAA,eAAC,KAAA;IAAA;AAC1B,QAAM,SAAA,SAAuC;AAC7C,QAAM,cAAY,CAAA;AAElB,QAAI,YAAU,SAAI,gBAAkB;QAClC,CAAA,aAAY,kBAAK,QAAA,SAAA,WAAA,GAAA;kBACP,KAAA;QACR,QAAQ,OAAA;QACR,QAAO;QACP,OAAA,SAAW;QACV,WAAA,SAAA;MAEK,CAAA;AACR,UAAI,kBAAe,SAAA;UACjB,iBAAa;qBAAW,QAAA,SAAe,IAAA,SAAA;AACrC,cAAM,kBAAY,GAAA;AAClB,cAAI,YAAU,mBAAoB,gBAAK;cACrC,CAAA,aAAO,CAAA,gBAAA,KAAA,iBAAA,SAAA,GAAA;AACR;UACD;AACM,cAAA,UAA8B,gBAAa;AAG3C,cAAA,KAA2C,MAAM,QAAY,IAAA,OAAA,GAAA,WAAA,GAAA,UAAA,YAAA,GAAA;cACjE,KAAK,OAAE,KAAS;YAChB,OAAA;YACA;YACA,mBAAiB;YAJH,YAAA;UAOhB,CAAA,GAAI,qBAAY,GAAA,QAAoB,WAAA,GAAA;cAElC,YAAM,oBAA0B;gBAC9B,kBAAgB,QAAM,oBAAA;cACtB,gBAAW;cACX,WAAA,YAAgB,iBAAU,QAAA,KAAA;cACzB,gBAAA;YAGH,CAAA;gBACE,iBAAiB;0BACP,KAAA;gBACR,QAAQ;gBACR,QAAO;gBACP,OAAA;gBACC;cACJ,CAAA;YACF;UACA;QACJ,CAAA;MACF;IAED;QAEE,YAAS,SAAA,KACT,SAAS,kBACT,SAAS,UACT,SAAS,kBAET,SAAM,kBAAoB;AAE1B,UAAI,YAAC,CAAA;WACH,eAAa;qBACN,SAAW,QAAA;cACd,CAAA,WAAY;AACb,wBAAA,QAAA,SAAA,OAAA;AAAA,qBAAA,OAAA,MAAA,KAAA;YAAA,CAAA;UAKO;AACR,cAAI,SAAQ,SAAA;cACV,QAAK;gBAKH,CAAA,WAAa;kBACX,OAAI,OAAA,KAAA;gBAIJ,IAAA;gBACA,OAAA,MAAW,UAAS,SAAS,QAAA,EAAA;gBAC7B,WAAU,SAAO;gBACjB,YAAA;gBACC,mBAAA;cAEH,CAAA;kBACE,KAAA,UAAM;AACP,yBAAA,SAAA,SAAA,CAAA,GAAA,MAAA,GAAA,EAAA,MAAA,KAAA,OAAA,CAAA;cACF;YAED;mBACE,QAAS,QAAS;cAClB,SAAS,SAAE;cACV,WAAA,SAAA;YACJ,CAAA;UAID;cACE,CAAA,aAAa,CAAA,SAAA,gBAAA;mBACT,OAAE;cACJ,IAAA;sBAAgB,SAAS,OAAA,IAAA;AACvB,oBAAA,YAAgB,GAAA,WAAK,SAAe,GAAM;AAC3C,uBAAA,cAAA,eAAA,QAAA;cACA;YACJ,CAAA;UACF;QAED;QAGA,SAAA,SAAiB;QAIjB,YAAA;QAMA,kBAAgB,SAAS;QAExB,gBAAQ,SAAM,kBAAW;MAE5B,CAAA,EAAA,QAAI,SAAS,SAAA;AAAA,eAAuB,UAAS,KAAA,OAAc;MAAE,CAAA;UAI3D,SAAO,uBAAqB,SAAK,gBAAM;AACxC,eAAA,QAAA,IAAA,SAAA,EAAA,KAAA,WAAA;AAAA,iBAAA;QAAA,CAAA;MACF;IAED;AACD,WAAA,QAAA,QAAA,MAAA;EAEM;gBAAP,UA4BC,yBAAA,SAAA,oBAAA,UAAA;AAdC,QAAM,QAAO;QACX,OAAE,OAAA,uBAA4B,aAC5B,mBAAmB,SAAA,SAAA,IAEvB;WACE,KAAI,MAAA,4BAAA,SAAA,QAAA;UACF;AAID,cAAA,mBAAA,SAAA,SAAA,CAAA,GAAA,QAAA,GAAA,EAAA,QAAA,EAAA,KAAA,EAAA,CAAA,GAAA,MAAA;MAAC,SACA;AACD,mBAAA,UAAA,MAAA,KAAA;MACA;IACJ,GAAA,SAAA,UAAA;EAEM;gBAKE,UAAK,aAAoB,SAE9B,SACA,SAAA,eACQ;AACX,WAAA,KAAA,qBAAA,SAAA,SAAA,aAAA,EAAA;EAEM;gBACM,UAA2C,gBAAa,WAAA;AACnE,QAAI,QAAQ,uBAAC,OAAQ,IAAA;SACnB,QAAM,QAAW,SAAA,MAAA,SAAA;YACf,WAAW;QACX,WAAA,KAAe;QACf,eAAc,KAAK;QACnB,cAAa,KAAM;QACnB,eAAA,KAAA;MACD;IACH,CAAA;AACD,WAAA;EAEM;gBACC,UAAY,cAAiB,SAAS,SAAA;AAC5C,QAAI,YAAW,KAAA,QAAA,IAAA,OAAA;QACb,WAAU;AACV,gBAAU,eAAa;AACxB,gBAAA,gBAAA,CAAA;IACF;EAMM;gBACG,UAAc,YAAS,SAAC,UAAA;AAEhC,QAAI,iBAAgB,KAAI;QACtB,CAAA,eAAiB,IAAG,QAAU,GAAC;AAC/B,UAAM,cAAU,KAAA,MAAA,kBAAA,QACd;AAEF,UAAM,UAAA,sCAA0C,KAAW,MAAE,iBAAA,WAAA,CAAA;AAC7D,UAAM,cAAc,KAAA,WAAgB,YAAW,WAAY;AAE3D,UAAM,cAAU,WAAwB,KAAA,WAAA,YAAA,OAAA;UACtC,eAAU;QAGV,UAAA;QACA,kBAAkB,iBAAiB,WAAC;QACpC,oBAAW,KAAA,WAAA,qBAAA,WAAA;QACX;QACA;QAKA,aAAO,iBAAA,uBAEL,WAAa,CAAA;iBACX,SAAQ,SAAS,CAAA,GAAA,WAAA,GAAA,EAAqB,aAAA,YAAA,YAAA,IAAA,SAAA,KAAA;cAClC,IAAI,SAAS,yBACf,IAAA,cAAA,SAAA;AACD,mBAAA,SAAA,SAAA,CAAA,GAAA,GAAA,GAAA,EAAA,WAAA,QAAA,CAAA;UACD;AACA,iBACH;QACD,CAAA,EAAA,CAAA;MAEF;UACE,MAAI,SAAQ,KAAA;YACV,OAAA,CAAA,eAAsB,IAAE,GAAA,GAAA;AACzB,yBAAA,IAAA,KAAA,YAAA;QACF;MAID;AACA,UAAI,QAAA;AACJ,UAAI,WAAW;AACf,UAAI,WAAW;AAChB,UAAA,WAAA;IAED;AACD,WAAA,eAAA,IAAA,QAAA;EAEO;gBAIN,UAAA,eACU,SAAU,UAAU,WAAW;AAG1C,WAAA,SAAA,SAAA,CAAA,GAAA,KAAA,UAAA,QAAA,EAAA,WAAA,GAAA,SAAA;EAEM;gBAIE,UAAA,aACF,SAAO,SACV;AAMF,cAAI,SAAe,SAAA,CAAA,GAAA,OAAA,GAAA,EAAA,WAAgC,KAAA,aAAa,QAAA,OAAA,QAAA,SAAA,EAAA,CAAA;QAC9D,OAAO,QAAC,gCAAoC,aAAA;AAC7C,cAAA,8BAAA;IAED;AACA,QAAM,YAAU,IAAG,UAAI,IAAA;QACrB,aAAY,IAAE,gBAAI;MAClB,cAAS;MACT;MACC;IAEH,CAAA;AAEA,SAAA,QAAU,IAAK,WAAA,SAAA,SAAA;cACb,KAAU;MACV,UAAA,QAAiB;MACjB,iBAAW;MACV,WAAA,QAAA;IAEH,CAAA;AACD,WAAA;EAEM;gBAAP,UA6BC,QAAA,SAAA,SAAA,SAAA;AA3BC,QAAA,QAAA;AAEA,QAAA,YACE,QAAa;AACb,gBAAA,KAAA,gBAAA;IAAA;cACE,UAAA,QACF,OAAA,uFAGc,IAAI,UAAK,QACvB,OAAA,EAAA;AAGF,cACE,UAAkB,QAAA,MAAA,SAClB,YAAA,gDACA,IAAA,UAAA,QAAA,MAAA,SAAA,YAAA,EAAA;AAEF,cACE,UAAkB,CAAA,QAAA,mBAClB,wDACA,IAAA,UAAA,CAAA,QAAA,mBAAA,EAAA;AAEF,cAAO,UAAK,CAAA,QACV,cAEA,mDAAqC,IAAC,UAAC,CAAA,QAAA,cAAA,EAAA;AAC1C,WAAA,KAAA,WAAA,SAAA,OAAA,EAAA,QAAA,WAAA;AAAA,aAAA,MAAA,UAAA,OAAA;IAAA,CAAA;EAGM;gBACE,UAAY,kBAAkB,WAAA;AACtC,WAAA,OAAA,KAAA,gBAAA;EAGM;gBACE,UAAK,oBAAmB,WAAA;AAChC,WAAA,KAAA;EAGM;gBACE,UAAY,qBAAqB,WAAA;AACzC,WAAA,OAAA,KAAA,mBAAA;EAEM;gBACA,UAAA,mBAA4B,SAAS,SAAA;AAC1C,SAAK,4BAAmB,OAAA;AACzB,SAAA,iBAAA;EAEO;gBACA,UAAY,8BAA0B,SAAA,SAAA;AAC5C,QAAI,YAAS,KAAA,QAAA,IAAA,OAAA;QAAE;AAChB,gBAAA,KAAA;EAEM;gBAAW,UAAA,aAAA,SAAA,SAAA;QAChB,YAAA,QAAoB;AAAA,gBAAA;QACrB,gBAAA;MAMC;IAAA;AAIA,SAAK,qBAAgB,UAAA,IAAS,eAAA,qEAAA,IAAA,IAAA,eAAA,EAAA,CAAA;SAC5B,QAAI,QAAU,SAAA,WAAiB;UAG7B,UAAU,iBAAgB;AAC3B,kBAAA,gBAAA,cAAA;aACC;AACD,kBAAA,KAAA;MACA;IAEH,CAAA;QACE,KAAK,eAAa;AACnB,WAAA,gBAAA,uBAAA,OAAA,IAAA;IAGD;AACD,WAAA,KAAA,MAAA,MAAA,OAAA;EAEM;gBAAP,UAuFC,uBAAA,SAAA,SAAA;AAtFC,QAAA,QAAA;AAEA,QAAM,YAAU,QAAwC;AAAA,gBAAA;IAAA;AACxD,QAAM,UAAA,oBAAA,IAAiB;AACvB,QAAM,oBAAkB,oBAAG,IAAO;AAElC,QAAI,qBAAqB,oBAAG,IAAA;QAC1B,MAAA,QAAQ,OAAQ,GAAA;cACV,QAAO,SAAS,MAAQ;YAC1B,OAAA,SAAA,UAA0B;AAC3B,4BAAA,IAAA,MAAA,KAAA;mBACC,eAAkB,IAAI,GAAI;AAC3B,4BAAA,IAAA,MAAA,UAAA,IAAA,EAAA,UAAA,KAAA;mBACC,gBAAmB,IAAI,KAAM,KAAA,OAAA;AAC9B,6BAAA,IAAA,IAAA;QACA;MACJ,CAAA;IAED;iBAA2C,QAAA,SAAA,IAAE,SAAQ;AACnD,UAAI,KAAI,GAAA,iBAAA,WAAA,GAAA;UACN,IAAI;YACF,YAAY,OAAO;AACnB,kBAAO,IAAA,SAAA,EAAA;AACR;QAGC;AAIF,YACE,YAAW,GAAA,WAAc,cAAA,GAAA,QAAA;YACzB,gBAAa,aAEb,YAAO,YAAA,CAAA,GAAA,aAAA,GAAA;AACR;QAED;YAEE,YAAU,YACT,aAAY,kBAAkB,IAAI,SAAU,KAE7C,YAAY,kBAAa,IAAA,QAAA,GAAA;AACzB,kBAAI,IAAA,SAAS,EAAA;cAAE;AACX,8BAAQ,IAAA,WAAA,IAAA;cAAE;AACf,8BAAA,IAAA,UAAA,IAAA;QACF;MACA;IAEH,CAAA;QACE,mBAAmB,MAAA;yBAID,QAAA,SAAa,SAAA;AAC7B,YAAM,UAAS,aAAQ,oBAAuB;YAC5C,YAAU,MAAQ,SAAK,OAAA,EAAA,KAAA;UACvB,UAAS,QAAS;UACjB,WAAA,QAAA;QACH,CAAA;YACE,KAAA,IAAA,gBAAkB;UAClB,cAAS;UACT;UAIC,SAAA,SAAA,SAAA,CAAA,GAAA,OAAA,GAAA,EAAA,aAAA,eAAA,CAAA;QACH,CAAA;AACA,kBAAU,GAAA,YAAA,OAAsB;AAChC,kBAAQ,mBAAiB,EAAA;AACxB,gBAAA,IAAA,SAAA,EAAA;MACJ,CAAA;IAED;QACE,WAAA,kBAA0B,MAAA;wBACX,QAAE,SAAA,UAAA,WAAA;YACb,CAAA,UAAU;AAKX,qBAAA,UAAA,KAAA,iBAAA,OAAA,OAAA,cAAA,WAAA,WAAA,EAAA,EAAA,OAAA,KAAA,UAAA,WAAA,MAAA,CAAA,GAAA,oDAAA,CAAA;QACA;MACJ,CAAA;IAED;AACD,WAAA;EAEM;gBAAP,UAqBC,2BAAA,SAAA,gBAAA;AApBC,QAAA,QAAA;AAEA,QAAM,mBAAA,QAA6D;AAAG,uBAAA;IAAA;AAEtE,QAAI,0BACF,CAAA;SAEQ,qBAAgB,iBAAgB,QAAO,QAAC,EAAA,QAAA,SAAA,iBAAA,SAAA;AAChD,UAAA,cAAgB,gBAAkB,QAAC;AACnC,sBAAI,iBAAc;UACd,kCACY,aACd,gBAAA,cAA6B;AAC9B,gCAAA,KAAA,gBAAA,QAAA,CAAA;MACD;AACC,YAAA,SAAA,OAAA,EAAA,QAAA,IAAA;IAEH,CAAA;AAEA,SAAA,iBAAmB;AACpB,WAAA,QAAA,IAAA,uBAAA;EAEM;gBACA,UAAS,qBAAyB,SAAA,iBAAmB;AAC3D,SAAA,SAAA,gBAAA,OAAA,EAAA,mBAAA,eAAA;EAEM;gBAAP,UA0DC,2BAAA,SAAA,IAAA;QAzDC,QAAK;AAML,QAAA,QAAY,GAAC,OAAS,cAAQ,GAAS,aAAA,cAAA,GAAA,aAAA,YAAA,GAAA,WAAA,KAAA,GAAA,SAAA,UAAA,OAAA,SAAA,CAAA,IAAA;AACvC,YAAA,KAAY,UAAK,KAAA,EAAa;AAE9B,gBAAM,KAAA,aAAiB,OAAC,SAA6B;QACnD,iBAAK,SAAA,YACH;aAIA,MAAI,sBAA0B,OAAE,SAAA,UAAA,EAAA,IAAA,SAAA,QAAA;YAG9B,gBAAI,YAAwB;cAC1B,kBAAiB,QAAA,WAAA,GAAA;kBACf,MAAK,MAAA;cACL;cACA,QAAQ,OAAA;cACR,QAAA;cACC,WAAA;YACJ,CAAA;UAED;AACD,gBAAA,iBAAA;QAED;YACE,sBAAsB,MAAA,GAAA;gBACpB,IAAA,YAAe;YACd,eAAA,OAAA;UACJ,CAAA;QAED;AACA,eAAA;MAAC,CAAA;IAEL;QACE,KAAM,UAAA,KAAA,EAAA,kBAAyB;AAM/B,UAAA,sBAAsC,KAAA,WAAQ,qBAAA,OAAA,WAAA,OAAA,EAAA,KAAA,cAAA;aAC5C,IAAO,WAAuC,SAAA,UAAA;AAC9C,YAAA,MAAA;AAIA,4BAAO,KAAM,SAAO,YAAI;AAAA,iBAAc,MAAA,WAAA,UAAA,QAAA;QAAA,GAAA,SAAA,KAAA;AACrC,eAAA,WAAA;AAAA,iBAAA,OAAA,IAAA,YAAA;QAAA;MACJ,CAAA;IAED;AACD,WAAA,eAAA,SAAA;EAEM;gBACA,UAAA,YAAqB,SAAS,SAAA;AACnC,SAAK,qBAAmB,OAAA;AACzB,SAAA,iBAAA;EAEO;gBACD,UAAA,uBAAqC,SAAA,SAAA;AAC1C,SAAK,4BAAqB,OAAA;AAC3B,SAAA,YAAA,OAAA;EAEM;gBAMA,UAAc,cAAQ,SAAS,SAAA;AACpC,SAAK,eAAS,OAAa,OAAG;AAC9B,SAAK,SAAQ,OAAO,EAAA,KAAQ;AAC7B,SAAA,QAAA,OAAA,OAAA;EAEM;gBACI,UAAA,mBAAW,WAAA;QAAE,KAAK;AACvB,WAAC,YAAgB;AACtB,SAAA,QAAA,QAAA,SAAA,MAAA;AAAA,aAAA,KAAA,OAAA;IAAA,CAAA;EAEM;gBACE,UAAK,gBAAW,WAAA;AACxB,WAAA,KAAA;EAOO;gBAAR,UA0EC,wBAAA,SAAA,OAAA,SAAA,WAAA,eAAA;;AAtEC,QAAA;AAKA,QAAI,kBAAuC,QAAA;AAAA,sBAAA,MAAA,YAAA,QAAA,YAAA,SAAA,SAAA,QAAA,wBAAA,QAAA,OAAA,SAAA,KAAA,KAAA;IAAA;AAEnC,QAAA;AACR,QAAI,cAAa,KAAA,UAAA,KAAA,EAAA;QACT,aAAwC;AAE9C,UAAM,KAAA,MAAS,4BAAG,GAAA,yBAAA,OAAA,GAAA;UAChB,YAAO;QACP,OAAA;QACA;QACA,eAAc,iBAAc,WAAA,KAAA;QAI5B,SAAA,KAAA,eAAA,SAAA,SAAA,CAAA,GAAA,OAAA,GAAA,EAAA,YAAA,CAAA,cAAA,CAAA,CAAA;MAEF;AAEA,gBAAI,UAAe;UACjB,eAAM;AACN,YAAA,gBAAA,0BAAyC,IAAA,WAAa,KAAA,oBAAA,IAAA;AAEtD,kCAAgB,IAAA,aAAmB,aAAW;AAC9C,YAAA,YAAa,mBAAgB,SAAS;AAEtC,qBAAK,cAAY,IAAA,SAAA;YACf,CAAA,YAAa;cACX,UAAQ,IAAM,QAAA;YACb,QAAA,MAAA,SAAA;UAEH,CAAA;AAEA,wBAAQ,IAAQ,WAAA,aAAA,OAAA;kBACV,QAAA,WAAkB;gBAClB,cAAY,OAAO,SAAG,KACxB,cAAA,OAAA,GAAA;AACD,wCAAA,OAAA,WAAA;YACA;UACJ,CAAA;QAEF;aACC;qBACU,IAAI,QAAE;UACb,QAAA,MAAA,SAAA;QACJ,CAAA;MACF;WACC;mBACE,IAAa,QAAO;QACnB,WAAA,GAAA,EAAA,MAAA,CAAA,EAAA,CAAA;MACH,CAAA;AACD,gBAAA,KAAA,eAAA,OAAA;IAEO;AACR,QAAI,cAAa,KAAA,UAAA,KAAA,EAAA;QACf,aAAa;mBACJ,SAAK,YAAW,SAAa,QAAA;eAClC,MAAQ,WAAE,aAAW;UACrB,UAAA;UACA,cAAO;UACP;UACC;QACF,CAAA;MACJ,CAAA;IAED;AACD,WAAA;EAEO;gBASA,UAAY,qBAAuB,SAAQ,WAAA,oBAAoB,SAAA;AAErE,QAAA,YACE,UAAK,gBAAqB,KACxB,kBACA;WAKA,SAAM,KAAY,sBAAuB,UAAQ,UAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,QAAA;AAIjD,UAAI,YAAS,gBAAc,OAAA,MAAe;UACxC,aAAa,UAAI,eAAmB;YAElC,aAAM,QAAU,gBAAc,QAAY;gBACxC,UAAA,UAAsB,IAAA,YAAM;YAC1B,eAAA,OAAA;UACL,CAAA,CAAA;QACD;AACA,kBAAU,WAAW,QAAC,SAAA,kBAAA;AACvB,kBAAA,UAAA;MAED;UACE,MAAM;QACN,MAAA,OAAS;QACT,SAAA;QACA,eAAA,UAAA,iBAAA,cAAA;MAEF;UACE,aAAa,QAAO,gBAAO,UAAA;AAC5B,YAAA,SAAA,OAAA;MAED;AAGF,aAAA;gBACa,cAAG;UACZ,QAAE,cAAY,YAAA,IACZ,eAGA,IAAA,YAAa,EAAA,aAAyB,CAAA;UACxC,aAAU,UAAU,eAAO;AAC5B,kBAAA,UAAA,KAAA;MAED;AAEF,YAAA;IACH,CAAA;EAEM;gBAAP,UA2EC,uBAAA,SAAA,SAAA,SAAA,eAAA;AArEC,QAAA,QAAA;AAEA,QAAM,kBAAa,QAAU;AAAA,sBAAe,cAAS;IAAA;AACrD,QAAM,QAAA,KAAY,UAAK,QAAa,KAAK,EAAE;AAC3C,QAAM,YAAY,KAAK,aAAS,OAAS,QAAA,SAAA;AAGvC,QAAA,YAKS,KAAA,SALT,OAAA;AAOF,QAAM,KAAA,QAAa,aAAa,cAAc,OAAA,SAAA,gBAAA,IAAA,KAAA,QAAA,aAAA,cAAA,OAAA,SAAA,SAAA,IAAA,KAAA,QAAA,mBAAA,oBAAA,OAAA,SAAA,QAAA,IAAA,KAAA,QAAA,6BAAA,8BAAA,OAAA,SAAA,QAAA,IAAA,KAAA,QAAA,SAAA,UAAA,OAAA,SAAA,CAAA,IAAA;QAC5C,aAAK,OAAA,OAAA,CAAA,GAAA,SAAA;MACL;MACA;MACA;MACA;MACA;MACA;MACC;IAEH,CAAA;QAIE,gBAAW,SAAY,YAAU;AACjC,iBAAO,YAAK;AAKZ,aAAA,MAAA,mBAAA,WAAA,YAAA,aAAA;IAIF;SAEE,eAAW,IAAA,SAAM,SAAO,QAAQ;AAC/B,iBAAA,WAAA;AAAA,eAAA,QAAA,OAAA,MAAA;MAAA,CAAA;IAKH,CAAA;QASI,UAAO,IAAA,QAAW,KAAA,UAAA,WAChB,KAAW,EAAK,mBAIhB,KAAA,WAAc,qBAClB,WAAA,OAAA,WAAA,WAAA,WAAA,OAAA,EAAA,KAAA,aAAA,IAEF,cAAgB,WAAA,SAAA,CAAA;YACd,QAAK,WAAe;AACpB,YAAA,eAAqB,OAAO,OAAE;AAC7B,2BAAA,OAAA;IAEH,CAAA;AACD,WAAA;EAEM;gBAAP,UA0JC,iBAAA,SAAA,IAAA;QAzJC,QAAA;AAOA,QAAM,cAAA,GAAA,aAA6B,UAI9B,GAAA,SAAA,KAAA,GAAA,YAAA,aAAA,OAAA,SAAA,QAAA,IAAA,KAAA,GAAA,kBAAA,mBAAA,OAAA,SAAA,aAAA,aAAA,gBAAA,IAAA,SAAA,IAAA,iBAAA,GAAA;AAEL,QAAI,sBAAS,oBAAA,IAAA;QACX,SAAK;WACH,qBAAoB,OAAI,EAAO,QAAE,SAAA,IAAA,SAAA;4BAC7B,IAAA,SAAA;UACF;UACC,UAAA,MAAA,SAAA,OAAA,EAAA,QAAA;QACF,CAAA;MACJ,CAAA;IAED;AAEA,QAAI,UAAA,oBAAa;QACf,aAAW;WACT,MAAM,MAAE;QA+BR,QAAA;QASA,YAAA,cAAgB,oBAAA;QAEhB;wBAEI,SAAa,OAAA,MAAY,UAAS;cAClC,KAAK,MAAC,mBAAwB,aAE5B,MAAI,QAAA;cACN,IAAI;gBAIF,gBAAA;AAEA,kCACE,OAAc,GAAG,OAAM;AAEzB,kBAAI,SAAM,eAAW,IAAA,MAAA,QAAA;kBAGnB,WAAW,MAAC;AACb,yBAAA,GAAA,QAAA;cAID;kBACE,WAAW,OAAK;AACjB,wBAAA,IAAA,IAAA,MAAA;cAID;AACD,qBAAA;YAED;gBAIE,mBAAmB,MAAK;AACzB,kCAAA,IAAA,GAAA,SAAA,EAAA,IAAA,UAAA,KAAA,CAAA;YACF;UACF;QACA;MACJ,CAAA;IAED;QACE,oBAAoB,MAAA;0BAAe,QAAQ,SAAA,KAAA,SAAM;AAC/C,YAAI,KAAA,IAAwE,IAAA,WAAA,IAAA,UAAA,OAAA,IAAA;AAI5E,YAAI;YACF,gBAAW;cACT,CAAA,MAAM;AACN,gBAAI,OAAM,GAAG;AACb,iBAAI,MAAO;AACZ,mBAAA,KAAA,QAAA;UACD;AACD,mBAAA,eAAA,IAAA,MAAA,QAAA;QAGD;YACE,CAAA,kBAAmB,WAAG,MAAA;AACvB,mBAAA,GAAA,QAAA;QAED;YACE,WAAW,OAAK;AACjB,kBAAA,IAAA,IAAA,MAAA;QAED;YACE,QAAK,QAAA,oBAA8B,KAAA,GAAA;AACpC,gBAAA,qBAAA,OAAA;QACA;MACJ,CAAA;IAED;QAQE,kBAAW;AACZ,WAAA,MAAA,iBAAA,gBAAA;IAED;AACD,WAAA;EAEO;gBAAR,UAqJC,qBAAA,SAAA,WAAA,IAAA,eAAA;QAnJG,QAAK;AAcP,QAAM,QAAA,GAAA,OAAgB,YAAa,GAAA,WAAc,cAAA,GAAA,aAAA,qBAAA,GAAA,oBAAA,cAAA,GAAA,aAAA,oBAAA,GAAA,mBAAA,UAAA,GAAA,SAAA,8BAAA,GAAA;AAEjD,QAAA,mBAAe,UAAA;cACb,KAAU;MACV,UAAS;MACT;MACC;IAEH,CAAA;AAEA,QAAM,YAAA,WAAmB;AAAA,aACM,UAC7B,QAAgE,SAAA;IAAA;QAAhE,mBAAA,SAAA,OAAA,gBAAgB;AAEhB,UAAM,mBAAkB,QAAC;AAAA,yBAAA,UAAA,iBAAA,cAAA;MAAA;AAEzB,UAAI,OAAO,MAAA;UACP,WACA,CAAC,qBACH,CAAA,MAAA,MAAA,CAAA,CAAA,GAAA;AACD,8BAAA,MAAA,OAAA;MAED;AAOA,UAAI,WAAQ,SAAK,OAAU;AAAK,eAAE,WAAA,GAAkB,SAAE,EAAA,MAAA,OAAA,SAAA,yBAAA,cAAA,GAAA,eAAA,eAAA,GAAA,MAAA,WAAA,OAAA,EAAA,SAAA,KAAA,CAAA,CAAA;MAAA;UACpD,QAAO,MAAK,UAAW,KAAA,EAAA,oBAAa;eAClC,MAAQ,WAAO,aAAA;UACf,UAAA;UACA,cAAO,EAAA,KAAA;UACP;UACA;UACC,wBAAa;QACjB,CAAA,EAAA,KAAA,SAAA,UAAA;AAAA,iBAAA,SAAA,SAAA,QAAA,MAAA;QAAA,CAAA;MAED;AACA,aAAA,SAAA,IAAA;IAEF;QAEE,qBAEoB,gBAAc,aAAO,sBACvC,cAAuB,WAEvB,uBAA2B,UAAA,IAEzB;QACJ,kBAAK,WAAA;aACH,MAAS,mBAAA,WAAA,oBAAA;QACT;QACA;QACA;QACA;MAAC,CAAA;IAEL;QAEE,eAAO,+BACP,OAAA,qBAAqB,YACrB,qBAAA,iBAEF,yBAAqB,aAAA;YACrB;;WACE,eAAa;AAEb,YAAI,OAAK,UAAU;YACjB,KAAA,UAAO;iBACL;YACA,iBAAA,MAAA,UAAA,UAAA,CAAA;UACH;QAED;YACE,qBAAO,cAAA;iBACL;YACA,iBAAiB,IAAA;YACjB,gBAAA;UACH;QAED;eACE;UACA,gBAAA;QACH;MAED;WACE,qBAAwB;AAExB,YAAI,OAAK,UAAY;YACnB,KAAA,YAAO,qBAAA,cAAA;iBACL;YACA,iBAAiB,IAAA;YACjB,gBAAA;UACH;QAED;eACE;UACA,gBAAA;QACH;MAED;WACE;eACE;UACA,iBAAA,UAAA,GAAA,UAAA,UAAA,CAAA;QAEJ;WACE;YACE,cAAO;iBACL;YACA,iBAAiB,UAAA,CAAA;YACjB,gBAAA;UACH;QAED;AAEF,eAAK,CAAA,gBAAU,CAAA;WACb;YACE,cAAO;iBAIL;YACA,iBAAiB,UAAA,QAAA,CAAA;YACjB,gBAAA;UACH;QAED;AAEF,eAAK,CAAA,gBAAS,CAAA;WACZ;AACD,eAAA,CAAA;;EAGK;gBACF,UAAY,WAAa,SAAW,SAAG;QACzC,WAAK,CAAO,KAAK,QAAO,IAAE,OAAI,GAAS;AACxC,WAAA,QAAA,IAAA,SAAA,IAAA,UAAA,MAAA,OAAA,CAAA;IACD;AACD,WAAA,KAAA,QAAA,IAAA,OAAA;EAEO;gBAAe,UAAA,iBAAA,SAAY,SAAA;AACjC,QAAM,YAAU,QAAQ;AAAA,gBAAW,CAAA;IAAA;AACnC,QAAA,aAAA,KAAA,WACK,eACH,OAAA;AAEH,WAAA,SAAA,SAAA,CAAA,GAAA,UAAA,GAAA,EAAA,iBAAA,KAAA,gBAAA,CAAA;EACH;AAr3CA,SAq3CC;;;;AC15CD,IAAI,uBAAuB;AA0BrB,sBAGJ,UACA,SAAiB;AAEjB,SAAO,QAAQ,UAAU,SAAS,QAAQ,aAAa;IACrD,WAAS,SAAA,SAAA,CAAA,GACJ,SAAS,SAAS,GAClB,QAAQ,SAAS;GAEvB;AACH;AAQA,IAAA,eAAA,WAAA;AAmDE,yBAAY,SAAyC;AAArD,QAAA,QAAA;AA7CO,SAAA,iBAAiC,CAAA;AAKhC,SAAA,sBAAiD,CAAA;AACjD,SAAA,sBAAiD,CAAA;AAyCrD,QAAA,MAqBE,QAAO,KApBT,cAoBE,QAAO,aAnBT,UAmBE,QAAO,SAlBT,SAkBE,QAAO,OAjBT,KAiBE,QAAO,SAjBT,UAAO,OAAA,SAAG,QAAK,IACf,KAgBE,QAAO,oBAhBT,qBAAkB,OAAA,SAAG,IAAC,IACtB,KAeE,QAAO,mBAfT,oBAAiB,OAAA,SAIf,OAAO,WAAW,YAClB,CAAE,OAAe,qBACjB,UAAO,IACT,KAQE,QAAO,oBART,qBAAkB,OAAA,SAAG,OAAI,IACzB,kBAOE,QAAO,gBANT,KAME,QAAO,wBANT,yBAAsB,OAAA,SAAG,QAAK,IAC9B,YAKE,QAAO,WAJT,WAIE,QAAO,UAHT,kBAGE,QAAO,iBAFH,sBAEJ,QAAO,MADA,yBACP,QAAO;AAEL,QAAA,OAAS,QAAO;AAEtB,QAAI,CAAC,MAAM;AACT,aAAO,MACH,IAAI,SAAS,EAAE,KAAK,aAAa,QAAO,CAAE,IAC1C,WAAW,MAAK;;AAGtB,QAAI,CAAC,QAAO;AACV,YAAM,UAAI,IAAA,eACR,4JAEkE,IAClE,IAAA,eAAA,CAAA;;AAGJ,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,wBAAwB,WAAW,qBAAqB;AAC7D,SAAK,qBAAqB;AAC1B,SAAK,iBAAiB,mBAAkB,CAAA;AACxC,SAAK,WAAW;AAEhB,QAAI,oBAAoB;AACtB,iBACE,WAAA;AAAM,eAAC,MAAK,wBAAwB;MAA9B,GACN,kBAAkB;;AAItB,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,QAAQ,KAAK,MAAM,KAAK,IAAI;AACjC,SAAK,SAAS,KAAK,OAAO,KAAK,IAAI;AACnC,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,2BAA2B,KAAK,yBAAyB,KAAK,IAAI;AAEvE,QAAI,qBAAqB,OAAO,WAAW,UAAU;AAClD,aAAe,oBAAoB;;AAMtC,QAAI,CAAC,wBAAwB,SAAS;AACpC,6BAAuB;AACvB,UACE,OAAO,WAAW,eAClB,OAAO,YACP,OAAO,QAAQ,OAAO,QACtB,CAAE,OAAe,iCACjB;AACA,YAAM,MAAM,OAAO;AACnB,YAAM,KAAK,OAAO,IAAI;AACtB,YAAI,MAAG;AACP,YAAI,OAAO,OAAO,UAAU;AAC1B,cAAI,GAAG,QAAQ,SAAS,IAAI,IAAI;AAC9B,kBAAM;qBAEG,GAAG,QAAQ,UAAU,IAAI,IAAI;AACtC,kBAAM;;;AAGV,YAAI,KAAK;AACP,qBAAU,UACR,IAAA,uEACmB,GAAG;;;;AAM9B,SAAK,UAAU;AAEf,SAAK,aAAa,IAAI,WAAW;MAC/B,OAAK;MACL,QAAQ;MACR;MACA;KACD;AAED,SAAK,eAAe,IAAI,aAAa;MACnC,OAAO,KAAK;MACZ,MAAM,KAAK;MACX;MACA;MACA,iBAAiB;QACf,MAAM;QACN,SAAS;;MAEX,YAAY,KAAK;MACjB;MACA,aAAa,oBAAoB,WAAA;AAC/B,YAAI,MAAK,gBAAgB;AACvB,gBAAK,eAAe;YAClB,QAAQ,CAAA;YACR,OAAO;cACL,SAAS,MAAK,aAAa,cAAa;cACxC,WAAW,MAAK,aAAa,iBAAiB,CAAA;;YAEhD,2BAA2B,MAAK,MAAM,QAAQ,IAAI;WACnD;;MAEL,IAAI;KACL;EACH;AAMO,gBAAA,UAAA,OAAP,WAAA;AACE,SAAK,aAAa,KAAI;EACxB;AAqBO,gBAAA,UAAA,aAAP,SACE,SAAyC;AAEzC,QAAI,KAAK,eAAe,YAAY;AAClC,gBAAU,aAAa,KAAK,eAAe,YAAY,OAAO;;AAIhE,QACE,KAAK,yBACJ,SAAQ,gBAAgB,kBACvB,QAAQ,gBAAgB,sBAC1B;AACA,gBAAO,SAAA,SAAA,CAAA,GAAQ,OAAO,GAAA,EAAE,aAAa,cAAa,CAAA;;AAGpD,WAAO,KAAK,aAAa,WAA0B,OAAO;EAC5D;AAWO,gBAAA,UAAA,QAAP,SACE,SAAoC;AAEpC,QAAI,KAAK,eAAe,OAAO;AAC7B,gBAAU,aAAa,KAAK,eAAe,OAAO,OAAO;;AAG3D,cACG,UAAQ,QAAA,gBAA0C,qBACnD,mSAGqE,IACrE,UAAA,QAAA,gBAAA,qBAAA,CAAA;AAEF,QAAI,KAAK,yBAAyB,QAAQ,gBAAgB,gBAAgB;AACxE,gBAAO,SAAA,SAAA,CAAA,GAAQ,OAAO,GAAA,EAAE,aAAa,cAAa,CAAA;;AAGpD,WAAO,KAAK,aAAa,MAAqB,OAAO;EACvD;AASO,gBAAA,UAAA,SAAP,SAME,SAAqD;AAErD,QAAI,KAAK,eAAe,QAAQ;AAC9B,gBAAU,aAAa,KAAK,eAAe,QAAQ,OAAO;;AAE5D,WAAO,KAAK,aAAa,OAA4C,OAAO;EAC9E;AAMO,gBAAA,UAAA,YAAP,SACE,SAA2C;AAE3C,WAAO,KAAK,aAAa,yBAA4B,OAAO;EAC9D;AAWO,gBAAA,UAAA,YAAP,SACE,SACA,YAA2B;AAA3B,QAAA,eAAA,QAAA;AAAA,mBAAA;IAA2B;AAE3B,WAAO,KAAK,MAAM,UAAyB,SAAS,UAAU;EAChE;AAgBO,gBAAA,UAAA,eAAP,SACE,SACA,YAA2B;AAA3B,QAAA,eAAA,QAAA;AAAA,mBAAA;IAA2B;AAE3B,WAAO,KAAK,MAAM,aAA4B,SAAS,UAAU;EACnE;AAOO,gBAAA,UAAA,aAAP,SACE,SAAuD;AAEvD,SAAK,MAAM,WAA8B,OAAO;AAChD,SAAK,aAAa,iBAAgB;EACpC;AAaO,gBAAA,UAAA,gBAAP,SACE,SAA0D;AAE1D,SAAK,MAAM,cAAiC,OAAO;AACnD,SAAK,aAAa,iBAAgB;EACpC;AAEO,gBAAA,UAAA,0BAAP,SAA+B,IAAa;AAC1C,SAAK,iBAAiB;EACxB;AAEO,gBAAA,UAAA,eAAP,SAAoB,SAAuB;AACzC,WAAO,QAAQ,KAAK,MAAM,OAAO;EACnC;AAkBO,gBAAA,UAAA,aAAP,WAAA;AAAA,QAAA,QAAA;AACE,WAAO,QAAQ,QAAO,EACnB,KAAK,WAAA;AAAM,aAAA,MAAK,aAAa,WAAW;QACvC,gBAAgB;OACjB;IAFW,CAEV,EACD,KAAK,WAAA;AAAM,aAAA,QAAQ,IAAI,MAAK,oBAAoB,IAAI,SAAA,IAAE;AAAI,eAAA,GAAE;MAAF,CAAI,CAAC;IAApD,CAAqD,EAChE,KAAK,WAAA;AAAM,aAAA,MAAK,yBAAwB;IAA7B,CAA+B;EAC/C;AAMO,gBAAA,UAAA,aAAP,WAAA;AAAA,QAAA,QAAA;AACE,WAAO,QAAQ,QAAO,EACnB,KAAK,WAAA;AAAM,aAAA,MAAK,aAAa,WAAW;QACvC,gBAAgB;OACjB;IAFW,CAEV,EACD,KAAK,WAAA;AAAM,aAAA,QAAQ,IAAI,MAAK,oBAAoB,IAAI,SAAA,IAAE;AAAI,eAAA,GAAE;MAAF,CAAI,CAAC;IAApD,CAAqD;EACrE;AAOO,gBAAA,UAAA,eAAP,SAAoB,IAAsB;AAA1C,QAAA,QAAA;AACE,SAAK,oBAAoB,KAAK,EAAE;AAChC,WAAO,WAAA;AACL,YAAK,sBAAsB,MAAK,oBAAoB,OAAO,SAAA,GAAC;AAAI,eAAA,MAAM;MAAN,CAAQ;IAC1E;EACF;AAOO,gBAAA,UAAA,eAAP,SAAoB,IAAsB;AAA1C,QAAA,QAAA;AACE,SAAK,oBAAoB,KAAK,EAAE;AAChC,WAAO,WAAA;AACL,YAAK,sBAAsB,MAAK,oBAAoB,OAAO,SAAA,GAAC;AAAI,eAAA,MAAM;MAAN,CAAQ;IAC1E;EACF;AAcO,gBAAA,UAAA,2BAAP,SACE,gBAAwB;AAExB,WAAO,KAAK,aAAa,yBAAyB,cAAc;EAClE;AAaO,gBAAA,UAAA,iBAAP,SAIE,SAA+C;AAE/C,QAAM,MAAM,KAAK,aAAa,eAAe,OAAO;AACpD,QAAM,UAAkC,CAAA;AACxC,QAAM,UAAmD,CAAA;AAEzD,QAAI,QAAQ,SAAC,SAAQ,UAAQ;AAC3B,cAAQ,KAAK,QAAQ;AACrB,cAAQ,KAAK,OAAM;IACrB,CAAC;AAED,QAAM,SAAS,QAAQ,IACrB,OAAoB;AAKtB,WAAO,UAAU;AACjB,WAAO,UAAU;AAKjB,WAAO,MAAM,SAAA,OAAK;AAChB,iBAAU,UAAM,MAAA,qEAAqE,OAAS,KAAA,CAAA;IAChG,CAAC;AAED,WAAO;EACT;AAUO,gBAAA,UAAA,uBAAP,SACE,SAAyC;AAAzC,QAAA,YAAA,QAAA;AAAA,gBAAA;IAAyC;AAEzC,WAAO,KAAK,aAAa,qBAAqB,OAAO;EACvD;AAKO,gBAAA,UAAA,UAAP,SAAe,YAAoB;AACjC,WAAO,KAAK,MAAM,QAAQ,UAAU;EACtC;AASO,gBAAA,UAAA,UAAP,SAAe,iBAA4B;AACzC,WAAO,KAAK,MAAM,QAAQ,eAAe;EAC3C;AAKO,gBAAA,UAAA,eAAP,SAAoB,WAAkC;AACpD,SAAK,WAAW,aAAa,SAAS;EACxC;AAKO,gBAAA,UAAA,eAAP,SAAoB,WAAkC;AACpD,SAAK,WAAW,aAAa,SAAS;EACxC;AAKO,gBAAA,UAAA,eAAP,WAAA;AACE,WAAO,KAAK,WAAW,aAAY;EACrC;AAKO,gBAAA,UAAA,+BAAP,SAAoC,iBAAgC;AAClE,SAAK,WAAW,mBAAmB,eAAe;EACpD;AAKO,gBAAA,UAAA,UAAP,SAAe,SAAmB;AAChC,SAAK,OAAO,KAAK,aAAa,OAAO;EACvC;AACF,SAAA;AAAA,EA3iBA;;;AChFA,IAAM,WAAW,oBAAI,IAAG;AAGxB,IAAM,oBAAoB,oBAAI,IAAG;AAEjC,IAAI,wBAAwB;AAC5B,IAAI,gCAAgC;AAIpC,mBAAmB,QAAc;AAC/B,SAAO,OAAO,QAAQ,WAAW,GAAG,EAAE,KAAI;AAC5C;AAEA,yBAAyB,KAAa;AACpC,SAAO,UAAU,IAAI,OAAO,KAAK,UAAU,IAAI,OAAO,IAAI,GAAG,CAAC;AAChE;AAKA,0BAA0B,KAAiB;AACzC,MAAM,WAAW,oBAAI,IAAG;AACxB,MAAM,cAAgC,CAAA;AAEtC,MAAI,YAAY,QAAQ,SAAA,oBAAkB;AACxC,QAAI,mBAAmB,SAAS,sBAAsB;AACpD,UAAI,eAAe,mBAAmB,KAAK;AAC3C,UAAI,YAAY,gBAAgB,mBAAmB,GAAI;AAGvD,UAAI,eAAe,kBAAkB,IAAI,YAAY;AACrD,UAAI,gBAAgB,CAAC,aAAa,IAAI,SAAS,GAAG;AAGhD,YAAI,uBAAuB;AACzB,kBAAQ,KAAK,iCAAiC,eAAe,+LAEqB;;iBAE3E,CAAC,cAAc;AACxB,0BAAkB,IAAI,cAAc,eAAe,oBAAI,KAAG;;AAG5D,mBAAa,IAAI,SAAS;AAE1B,UAAI,CAAC,SAAS,IAAI,SAAS,GAAG;AAC5B,iBAAS,IAAI,SAAS;AACtB,oBAAY,KAAK,kBAAkB;;WAEhC;AACL,kBAAY,KAAK,kBAAkB;;EAEvC,CAAC;AAED,SAAA,SAAA,SAAA,CAAA,GACK,GAAG,GAAA,EACN,YAAW,CAAA;AAEf;AAEA,kBAAkB,KAAiB;AACjC,MAAM,UAAU,IAAI,IAAyB,IAAI,WAAW;AAE5D,UAAQ,QAAQ,SAAA,MAAI;AAClB,QAAI,KAAK;AAAK,aAAO,KAAK;AAC1B,WAAO,KAAK,IAAI,EAAE,QAAQ,SAAA,KAAG;AAC3B,UAAM,QAAQ,KAAK;AACnB,UAAI,SAAS,OAAO,UAAU,UAAU;AACtC,gBAAQ,IAAI,KAAK;;IAErB,CAAC;EACH,CAAC;AAED,MAAM,MAAM,IAAI;AAChB,MAAI,KAAK;AACP,WAAO,IAAI;AACX,WAAO,IAAI;;AAGb,SAAO;AACT;AAEA,uBAAuB,QAAc;AACnC,MAAI,WAAW,UAAU,MAAM;AAC/B,MAAI,CAAC,SAAS,IAAI,QAAQ,GAAG;AAC3B,QAAM,SAAS,MAAM,QAAQ;MAC3B;MACA,8BAA8B;KACxB;AACR,QAAI,CAAC,UAAU,OAAO,SAAS,YAAY;AACzC,YAAM,IAAI,MAAM,+BAA+B;;AAEjD,aAAS,IACP,UAGA,SAAS,iBAAiB,MAAM,CAAC,CAAC;;AAGtC,SAAO,SAAS,IAAI,QAAQ;AAC9B;AAGM,aACJ,UAAoC;AACpC,MAAA,OAAA,CAAA;WAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAAc;AAAd,SAAA,KAAA,KAAA,UAAA;;AAGA,MAAI,OAAO,aAAa,UAAU;AAChC,eAAW,CAAC,QAAQ;;AAGtB,MAAI,SAAS,SAAS;AAEtB,OAAK,QAAQ,SAAC,KAAK,GAAC;AAClB,QAAI,OAAO,IAAI,SAAS,YAAY;AAClC,gBAAU,IAAI,IAAI,OAAO;WACpB;AACL,gBAAU;;AAEZ,cAAU,SAAS,IAAI;EACzB,CAAC;AAED,SAAO,cAAc,MAAM;AAC7B;AAEM,uBAAqB;AACzB,WAAS,MAAK;AACd,oBAAkB,MAAK;AACzB;AAEM,mCAAiC;AACrC,0BAAwB;AAC1B;AAEM,+CAA6C;AACjD,kCAAgC;AAClC;AAEM,gDAA8C;AAClD,kCAAgC;AAClC;AAEA,IAAM,SAAS;EACb;EACA;EACA;EACA;EACA;;AAGF,AAAA,UAAiB,OAAG;AAEhB,QAAA,MAKE,OAAM,KAJR,MAAA,cAIE,OAAM,aAHR,MAAA,0BAGE,OAAM,yBAFR,MAAA,sCAEE,OAAM,qCADR,MAAA,uCACE,OAAM;AACZ,GARiB,OAAA,OAAG,CAAA,EAAA;AAUpB,IAAI,aAAU;;;AC9Ed,aAAa,cAAM,QAAQ,QAAQ;;;AC3FnC,aAAuB;;;ACFvB,YAAuB;AAcvB,IAAM,aAAa,eACf,OAAO,IAAI,oBAAoB,IAC/B;AAEE,4BAA0B;AAC9B,MAAI,UAAW,AAAM,oBAAsB;AAC3C,MAAI,CAAC,SAAS;AACZ,WAAO,eAAqB,qBAAe,YAAY;MACrD,OAAO,UAAU,AAAM,oBAAkC,CAAA,CAAE;MAC3D,YAAY;MACZ,UAAU;MACV,cAAc;KACf;AACD,YAAQ,cAAc;;AAExB,SAAO;AACT;;;ADnBO,IAAM,iBAAgD,SAAA,OAAK;AAChE,MAAM,gBAAgB,iBAAgB;AACtC,SAAO,AACL,qBAAA,cAAc,UAAS,MAAA,SACpB,SAAa;AACZ,cACE,UAAO,WAAY,QACnB,QAAA,2GACmD,IACnD,UAAA,WAAA,QAAA,QAAA,EAAA;AACF,WAAO,MAAM,SAAS,QAAQ,MAAM;EACtC,CAAC;AAGP;;;AEvBA,aAAuB;AAUhB,IAAM,iBAAqD,SAAC,IAGlE;MAFC,SAAM,GAAA,QACN,WAAQ,GAAA;AAER,MAAM,gBAAgB,iBAAgB;AACtC,SAAO,AACL,qBAAA,cAAc,UAAS,MAAA,SACpB,SAAkB;AAAjB,QAAA,YAAA,QAAA;AAAA,gBAAA,CAAA;IAAiB;AACjB,QAAI,UAAU,QAAQ,WAAW,QAAQ;AACvC,gBAAU,OAAO,OAAO,CAAA,GAAI,SAAS,EAAE,OAAM,CAAE;;AAGjD,cACE,UAAQ,QACR,QAAA,2GACuD,IACvD,UAAA,QAAA,QAAA,EAAA;AAEF,WACE,AAAA,qBAAC,cAAc,UAAQ,EAAC,OAAO,QAAO,GACnC,QAAQ;EAGf,CAAC;AAGP;;;ACrCA,mBAA2B;AAIrB,yBACJ,UAA+B;AAE/B,MAAM,UAAU,6BAAW,iBAAgB,CAAE;AAC7C,MAAM,SAAS,YAAY,QAAQ;AACnC,YACE,UACA,CAAA,CAAA,QAAA,oKAE0B,IAC1B,UAAA,CAAA,CAAA,QAAA,EAAA;AAEF,SAAO;AACT;;;AChBA,oBAA+C;;;ACF/C,oBAAiE;;;ACSjE,IAAY;AAAZ,AAAA,UAAY,eAAY;AACtB,gBAAA,cAAA,WAAA,KAAA;AACA,gBAAA,cAAA,cAAA,KAAA;AACA,gBAAA,cAAA,kBAAA,KAAA;AACF,GAJY,gBAAA,gBAAY,CAAA,EAAA;AAYxB,IAAM,QAAQ,oBAAI,IAAG;AAEf,uBAAwB,MAAkB;AAC9C,MAAI;AACJ,UAAQ;SACD,aAAa;AAChB,aAAO;AACP;SACG,aAAa;AAChB,aAAO;AACP;SACG,aAAa;AAChB,aAAO;AACP;;AAEJ,SAAO;AACT;AAGM,gBAAiB,UAAsB;AAC3C,MAAM,SAAS,MAAM,IAAI,QAAQ;AACjC,MAAI;AAAQ,WAAO;AAEnB,MAAI,WAAW,MAAM;AAErB,YACE,UAAU,CAAA,CAAA,YAAc,CAAC,CAAA,SACzB,MAAA,eAAe,OAAQ,UAAA,4CAA4C,IACjE,6GAC2C,IAC7C,UAAA,CAAA,CAAA,YAAA,CAAA,CAAA,SAAA,MAAA,EAAA;AAEF,MAAM,YAAY,SAAS,YAAY,OACrC,SAAC,GAAiB;AAAK,WAAA,EAAE,SAAS;EAAX,CAA+B;AAGxD,MAAM,UAAU,SAAS,YAAY,OACnC,SAAC,GAAiB;AAChB,WAAA,EAAE,SAAS,yBAAyB,EAAE,cAAc;EAApD,CAA2D;AAG/D,MAAM,YAAY,SAAS,YAAY,OACrC,SAAC,GAAiB;AAChB,WAAA,EAAE,SAAS,yBAAyB,EAAE,cAAc;EAApD,CAA8D;AAGlE,MAAM,gBAAgB,SAAS,YAAY,OACzC,SAAC,GAAiB;AAChB,WAAA,EAAE,SAAS,yBAAyB,EAAE,cAAc;EAApD,CAAkE;AAGtE,YACE,UAAU,CAAC,UAAM,UACd,SAAQ,UAAU,UAAU,UAAU,cAAc,SACvD,uHAC8D,IAC9D,UAAA,CAAA,UAAA,UAEF,SACE,UAAQ,UAAS,UAAgB,cAAG,SAAoB,EAAA;YAEtD,UAAG,QAAQ,SAAA,UAAe,SAAO,cAAA,UAAa,GAAA,8EAC9C,GAAA,OAAA,UAAA,OAAA,EAAqB,OAAA,QAAgB,QAAA,YAAc,EAAA,OAAA,cAAA,QAAA,GAAA,IACnD,qBAAA,OAAA,UAAA,QAAA,cAAA,IAGA,uEAA+D,IAAA,UAAA,QAAA,SAAA,UAAA,SAAA,cAAA,UAAA,GAAA,EAAA;AACnE,SAAK,QAAQ,SAAW,aAAU,QAAM,aAAA;MAAE,CAAA,QAAO,UAAY,CAAC,UAAA;AAExD,WAAA,aAAc;MAClB,cAAS,QAAA,SACP,oBACA,SACA,YAGF;YAEE,UAAG,YAAkB,WAAA,GAAA,sDAAgB,OAAA,UAAA,OAAA,IACrC,GAAA,OAAA,YAAA,QAAA,gBAAA,IAGE,uEAAuD,IAAA,UAAA,YAAA,WAAA,GAAA,EAAA;AAC7D,MAAA,aAAY,YAAW;AAEvB,cAAI,WAAmB,uBAAoB,CAAA;MACzC,WAAO,QAAW,WAAW,KAAA,SAAA,QAAA;AAC9B,WAAA,WAAA,KAAA;SACC;AACD,WAAA;EAED;AACA,MAAA,UAAU,EAAA,MAAkB,MAAC,UAAA;AAC7B,QAAA,IAAO,UAAQ,OAAA;AAChB,SAAA;AAED;AACE,4BAAiC,UAAE,MAAA;AACnC,MAAM,YAAA,OAAA,QAAwB;AAC9B,MAAM,wBAAoB,cAAc,IAAA;AACxC,MAAA,oBACgB,cACd,UAAA,IAAA;YACE,UAAG,UAAA,SAAqB,MAAA,aAAW,OAAA,uBAAiB,sBACtD,IACH,GAAA,OAAA,uBAAA,UAAA,EAAA,OAAA,mBAAA,oBAAA,CAAA,IAAA,UAAA,UAAA,SAAA,MAAA,EAAA;;;;ADzGK,kBAIJ,OACA,SAA6C;;AAE7C,MAAM,UAAU,8BAAW,iBAAgB,CAAE;AAC7C,MAAM,SAAS,gBAAgB,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,MAAM;AAC9C,MAAM,2BAA2B,OAAO,eAAe;AACvD,qBAAmB,OAAO,aAAa,KAAK;AACtC,MAAA,KAA0B,4BAAS,WAAA;AACvC,QAAM,oBAAoB,wBAAwB,OAAO,SAAS,wBAAwB;AAI1F,QAAI,YAAsD;AAC1D,QAAI,QAAQ,gBAAgB;AAC1B,kBAAW,QAAQ,eAAe,iBAAiB,iBAAiB;;AAGtE,QAAI,CAAC,WAAU;AAEb,kBAAW,OAAO,WAAW,iBAAiB;AAC9C,UAAI,QAAQ,gBAAgB;AAC1B,gBAAQ,eAAe,sBACrB,WACA,iBAAiB;;;AAKvB,QACE,QAAQ,kBACR,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,SAAQ,SACjB,CAAC,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,SACV,UAAS,iBAAgB,EAAG,SAC5B;AAEA,cAAQ,eAAe,gBACrB;QAGE,YAAY,WAAA;AAAM,iBAAA,wBAAwB,OAAO,SAAS,wBAAwB;QAAhE;QAClB,WAAW,WAAA;AAAM,iBAAA,IAAI,QAAc,SAAC,SAAO;AACzC,gBAAM,MAAM,UAAU,UAAU;cAC9B,MAAI,SAAC,SAAM;AACT,oBAAI,CAAC,QAAO,SAAS;AACnB,0BAAO;AACP,sBAAI,YAAW;;cAEnB;cACA,OAAK,WAAA;AACH,wBAAO;AACP,oBAAI,YAAW;cACjB;cACA,UAAQ,WAAA;AACN,wBAAO;cACT;aACD;UACH,CAAC;QAhBgB;SAmBnB,WAAA;AAAM,eAAA;MAAA,CAAI;;AAId,WAAO;EACT,CAAC,GAzDM,WAAQ,GAAA,IAAE,cAAW,GAAA;AA2DxB,MAAA,KAAsB,4BAAS,WAAA;;AACjC,QAAM,UAAS,SAAS,iBAAgB;AACxC,QAAI,CAAC,QAAO,WAAW,SAAS;AAC9B,UAAI,QAAO,OAAO;AAChB,QAAA,OAAA,QAAQ,aAAO,QAAA,QAAA,SAAA,SAAA,IAAA,KAAf,SAAkB,QAAO,KAAK;iBACrB,QAAO,MAAM;AACtB,QAAA,OAAA,QAAQ,iBAAW,QAAA,QAAA,SAAA,SAAA,IAAA,KAAnB,SAAsB,QAAO,IAAI;;;AAIrC,WAAO;EACT,CAAC,GAXI,SAAM,GAAA,IAAE,YAAS,GAAA;AAatB,MAAM,MAAM,0BAAO;IACjB;IACA;IACA;IACA;IACA,cAAc;IACd,mBAAmB,wBAAwB,OAAO,SAAS,wBAAwB;GACpF;AAKD,+BAAU,WAAA;;AACR,QAAM,oBAAoB,wBAAwB,OAAO,SAAS,wBAAwB;AAC1F,QAAI;AACJ,QAAI,IAAI,QAAQ,WAAW,UAAU,CAAC,MAAM,IAAI,QAAQ,OAAO,KAAK,GAAG;AACrE,UAAM,aAAW,OAAO,WAAW,iBAAiB;AACpD,kBAAY,UAAQ;AACpB,mBAAa,WAAS,iBAAgB;eAC7B,CAAC,MAAM,IAAI,QAAQ,mBAAmB,iBAAiB,GAAG;AACnE,eAAS,WAAW,iBAAiB,EAAE,MAAM,WAAA;MAAO,CAAC;AACrD,mBAAa,SAAS,iBAAgB;AACtC,UAAI,QAAQ,oBAAoB;;AAGlC,QAAI,YAAY;AACd,UAAM,iBAAiB,IAAI,QAAQ;AACnC,UAAI,eAAe,MAAM;AACvB,YAAI,QAAQ,eAAe,eAAe;;AAG5C,gBAAU,IAAI,QAAQ,SAAS,UAAU;AACzC,UAAI,CAAC,WAAW,WAAW,SAAS;AAClC,YAAI,WAAW,OAAO;AACpB,UAAA,OAAA,QAAQ,aAAO,QAAA,QAAA,SAAA,SAAA,IAAA,KAAf,SAAkB,WAAW,KAAK;mBACzB,WAAW,MAAM;AAC1B,UAAA,OAAA,QAAQ,iBAAW,QAAA,QAAA,SAAA,SAAA,IAAA,KAAnB,SAAsB,WAAW,IAAI;;;;AAK3C,WAAO,OAAO,IAAI,SAAS,EAAE,QAAQ,MAAK,CAAE;EAC9C,GAAG,CAAC,UAAU,QAAQ,OAAO,OAAO,CAAC;AAGrC,+BAAU,WAAA;AACR,QAAI,QAAQ,gBAAgB;AAC1B;;AAGF,QAAI,eAAe,SAAS,UAAU,QAAQ,OAAO;AAIrD,sBAAe;;AACb,UAAM,iBAAiB,IAAI,QAAQ;AACnC,UAAM,UAAS,SAAS,iBAAgB;AAExC,UACE,kBACA,eAAe,YAAY,QAAO,WAClC,eAAe,kBAAkB,QAAO,iBACxC,MAAM,eAAe,MAAM,QAAO,IAAI,GACtC;AACA;;AAGF,UAAI,eAAe,MAAM;AACvB,YAAI,QAAQ,eAAe,eAAe;;AAG5C,gBAAU,IAAI,QAAQ,SAAS,OAAM;AACrC,UAAI,CAAC,QAAO,SAAS;AACnB,QAAA,OAAA,OAAA,IAAI,QAAQ,aAAO,QAAA,QAAA,SAAA,SAAA,IAAE,iBAAW,QAAA,QAAA,SAAA,SAAA,IAAA,KAAA,KAAG,QAAO,IAAI;;IAElD;AAEA,qBAAiB,OAAY;;AAC3B,UAAM,OAAO,SAAS;AACtB,mBAAa,YAAW;AAQxB,UAAI;AACF,iBAAS,iBAAgB;AACzB,uBAAe,SAAS,UAAU,QAAQ,OAAO;;AAEjD,iBAAS,UAAU;;AAGrB,UAAI,CAAC,MAAM,eAAe,eAAe,GAAG;AAE1C,cAAM;;AAGR,UAAM,iBAAiB,IAAI,QAAQ;AACnC,UACG,kBAAkB,eAAe,WAClC,CAAC,MAAM,OAAO,eAAe,KAAK,GAClC;AACA,kBAAU,IAAI,QAAQ,SAAS;UAC7B,MAAM,eAAe;UACrB;UACA,SAAS;UACT,eAAe,cAAc;SAC9B;AACD,QAAA,OAAA,OAAA,IAAI,QAAQ,aAAO,QAAA,QAAA,SAAA,SAAA,IAAE,aAAO,QAAA,QAAA,SAAA,SAAA,IAAA,KAAA,KAAG,KAAoB;;IAEvD;AAEA,WAAO,WAAA;AAAM,aAAA,aAAa,YAAW;IAAxB;EACf,GAAG,CAAC,UAAU,QAAQ,gBAAgB,OAAO,qBAAqB,CAAC;AAEnE,MAAI;AACJ,EAAC,KAAyB,QAAvB,UAAO,GAAA,SAAK,SAAM,OAAA,IAApB,CAAA,SAAA,CAAsB;AAEvB;AAME,QACE,WACA,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,mBACT,CAAC,OAAO,WACP,EAAC,OAAO,QAAQ,OAAO,KAAK,OAAO,IAAI,EAAE,WAAW,MACrD,SAAS,QAAQ,gBAAgB,cACjC;AACA,eAAM,SAAA,SAAA,CAAA,GACD,MAAM,GAAA,EACT,SAAS,MACT,eAAe,cAAc,QAAO,CAAA;AAGtC,eAAS,QAAO;;AAKlB,QACE,QAAQ,kBACR,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,SAAQ,SACjB,CAAC,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,SACV,OAAO,SACP;AACA,eAAS,WAAW,wBAAwB,OAAO,SAAS,wBAAwB,CAAC,EAAE,MAAM,WAAA;MAAO,CAAC;;AAKvG,WAAO,OAAO,IAAI,SAAS,EAAE,QAAO,CAAE;;AAGxC,MACG,SAAQ,kBAAkB,OAAO,0BAClC,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,SAAQ,OACjB;AAGA,aAAS,IAAI,QAAQ,SAAS;MAC5B,SAAS;MACT,MAAM;MACN,OAAO;MACP,eAAe,cAAc;;aAEtB,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,SAAQ,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,iBAAgB,WAAW;AAW9D,aAAS;MACP,SAAS;MACT,MAAM;MACN,OAAO;MACP,eAAe,cAAc;;;AAIjC,MAAI,OAAO,UAAU,OAAO,OAAO,QAAQ;AAKzC,aAAM,SAAA,SAAA,CAAA,GACD,MAAM,GAAA,EACT,OAAO,OAAO,SAAS,IAAI,YAAY,EAAE,eAAe,OAAO,OAAM,CAAE,EAAC,CAAA;;AAI5E,MAAM,iBAAiB,2BAAQ,WAAA;AAAM,WAAC;MACpC,SAAS,SAAS,QAAQ,KAAK,QAAQ;MACvC,WAAW,SAAS,UAAU,KAAK,QAAQ;MAC3C,aAAa,SAAS,YAAY,KAAK,QAAQ;MAC/C,cAAc,SAAS,aAAa,KAAK,QAAQ;MACjD,aAAa,SAAS,YAAY,KAAK,QAAQ;MAC/C,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;;EANpB,GAOjC,CAAC,QAAQ,CAAC;AAEd,SAAA,SAAA,SAAA,SAAA,CAAA,GACK,cAAc,GAAA,EACjB,WAAW,wBAAwB,OAAO,SAAS,wBAAwB,EAAE,WAC7E,QACA,QAAQ,MACR,cAAc,IAAI,QAAQ,aAAY,CAAA,GACnC,MAAM;AAEb;AAKA,iCACE,OACA,SACA,iBAAqD;;AADrD,MAAA,YAAA,QAAA;AAAA,cAAA,CAAA;EAAiD;AAO/C,MAAA,OAME,QAAO,MALT,MAKE,QAAO,KAJT,cAIE,QAAO,aAHT,UAGE,QAAO,SAFT,cAEE,QAAO,aADN,eAAY,OACb,SAPE,CAAA,QAAA,OAAA,eAAA,WAAA,aAAA,CAOL;AAED,MAAI,oBAAiB,SAAA,EAAK,MAAK,GAAK,YAAY;AAChD,MAAI,iBAAgB;AAClB,wBAAoB,aAAa,iBAAgB,iBAAiB;;AAGpE,MAAI,MAAM;AACR,sBAAkB,cAAc;aAEhC,OAAA,kBAAkB,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,mBAEzB,mBAAkB,gBAAgB,kBAClC,kBAAkB,gBAAgB,sBAEpC;AAGA,sBAAkB,cAAc;aACvB,CAAC,kBAAkB,aAAa;AAGzC,sBAAkB,cAAc;;AAGlC,MAAI,CAAC,kBAAkB,WAAW;AAChC,sBAAkB,YAAY,CAAA;;AAGhC,SAAO;AACT;;;ADrWA,IAAM,gBAAgB;EACpB;EACA;EACA;EACA;EACA;;AAGI,sBACJ,OACA,SAAiD;AAE3C,MAAA,KAA4B,4BAG/B;IACD,QAAQ;GACT,GALM,YAAS,GAAA,IAAE,eAAY,GAAA;AAO9B,MAAI,SAAS,SAA4B,OAAK,SAAA,SAAA,SAAA,CAAA,GACzC,OAAO,GACP,UAAU,OAAO,GAAA,EAGpB,aAAa,UAAU,SAAS,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,cAAc,WACvD,MAAM,OAAS,CAAA,CAAA;AAGjB,MAAI,CAAC,UAAU,QAAQ;AACrB,aAAM,SAAA,SAAA,CAAA,GACD,MAAM,GAAA,EACT,SAAS,OACT,MAAM,QACN,OAAO,QACP,QAAQ,MAAK,CAAA;;AAKjB,MAAM,eAAe,2BAAQ,WAAA;AAC3B,QAAM,gBAAoC,CAAA;2BAC/B,MAAG;AACZ,UAAM,SAAS,OAAO;AACtB,oBAAa,QAAO,WAAA;AAAC,YAAA,OAAA,CAAA;iBAAA,MAAA,GAAA,MAAA,UAAA,QAAA,OAAY;AAAZ,eAAA,OAAA,UAAA;;AACnB,qBAAa,SAAC,YAAS;AAAK,iBAAA,SAAA,SAAA,CAAA,GAAM,UAAS,GAAA,EAAE,QAAQ,KAAI,CAAA;QAA7B,CAAgC;AAC5D,eAAQ,OAAc,MAAA,QAAI,IAAI;MAChC;;AALF,aAAkB,KAAA,GAAA,kBAAA,eAAA,KAAA,gBAAA,QAAA,MAAa;AAA1B,UAAM,MAAG,gBAAA;cAAH,GAAG;;AAQd,WAAO;EACT,GAAG,CAAA,CAAE;AAEL,SAAO,QAAQ,OAAO,SAAS;AAC/B,SAAO,OAAO,QAAQ,YAAY;AAElC,MAAM,WAAU,+BAEd,SAAC,gBAA6C;AAC9C,iBAAa,EAAE,QAAQ,MAAM,SAAS,eAAc,CAAE;AACtD,QAAM,UAAU,OAAO,QAAQ,mBAAc,QAAd,mBAAc,SAAA,SAAd,eAAgB,SAAS,EAAE,KAAK,SAAC,SAAO;AACrE,UAAM,UAAO,SAAA,SAAA,CAAA,GACR,MAAM,GAAA,EACT,MAAM,QAAQ,MACd,OAAO,QAAQ,OACf,QAAQ,MACR,SAAS,MAAK,CAAA;AAGhB,aAAO,OAAO,SAAS,YAAY;AACnC,aAAO;IACT,CAAC;AAID,YAAQ,MAAM,WAAA;IAAO,CAAC;AAEtB,WAAO;EACT,GAAG,CAAA,CAAE;AAEL,SAAO,CAAC,UAAS,MAAM;AACzB;;;AG9FA,oBAAyD;AAqBnD,qBAMJ,UACA,SAA0D;AAE1D,MAAM,SAAS,gBAAgB,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,MAAM;AAC9C,qBAAmB,UAAU,aAAa,QAAQ;AAC5C,MAAA,KAAsB,4BAAwC;IAClE,QAAQ;IACR,SAAS;IACT;GACD,GAJM,SAAM,GAAA,IAAE,YAAS,GAAA;AAMxB,MAAM,MAAM,0BAAO;IACjB;IACA,YAAY;IACZ,WAAW;IACX;IACA;IACA;GACD;AAID;AACE,WAAO,OAAO,IAAI,SAAS,EAAE,QAAQ,SAAS,SAAQ,CAAE;;AAG1D,MAAM,WAAU,+BAAY,SAC1B,gBAKM;AALN,QAAA,mBAAA,QAAA;AAAA,uBAAA,CAAA;IAKM;AAEA,QAAA,MAA8B,IAAI,SAAjC,UAAM,IAAA,QAAE,WAAO,IAAA,SAAE,YAAQ,IAAA;AAChC,QAAM,cAAW,SAAA,SAAA,CAAA,GAAQ,QAAO,GAAA,EAAE,UAAQ,UAAA,CAAA;AAC1C,QAAI,CAAC,IAAI,QAAQ,OAAO,WAAW,CAAC,YAAY,eAAe;AAC7D,gBAAU,IAAI,QAAQ,SAAS;QAC7B,SAAS;QACT,OAAO;QACP,MAAM;QACN,QAAQ;QACR,QAAM;OACP;;AAGH,QAAM,aAAa,EAAE,IAAI,QAAQ;AACjC,QAAM,gBAAgB,aACpB,aACA,cAAqB;AAGvB,WAAO,QAAO,OAAO,aAAa,EAAE,KAAK,SAAC,UAAQ;;AACxC,UAAA,OAAiB,SAAQ,MAAnB,SAAW,SAAQ;AACjC,UAAM,QACJ,UAAU,OAAO,SAAS,IACtB,IAAI,YAAY,EAAE,eAAe,OAAM,CAAE,IACzC;AAEN,UACE,eAAe,IAAI,QAAQ,cAC3B,CAAC,cAAc,eACf;AACA,YAAM,WAAS;UACb,QAAQ;UACR,SAAS;UACT;UACA;UACA,QAAM;;AAGR,YAAI,IAAI,QAAQ,aAAa,CAAC,MAAM,IAAI,QAAQ,QAAQ,QAAM,GAAG;AAC/D,oBAAU,IAAI,QAAQ,SAAS,QAAM;;;AAIzC,MAAA,OAAA,YAAY,iBAAW,QAAA,QAAA,SAAA,SAAA,IAAA,KAAvB,aAA0B,SAAS,IAAK;AACxC,MAAA,MAAA,eAAe,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAA,KAA1B,gBAA6B,SAAS,IAAK;AAC3C,aAAO;IACT,CAAC,EAAE,MAAM,SAAC,OAAK;;AACb,UACE,eAAe,IAAI,QAAQ,cAC3B,IAAI,QAAQ,WACZ;AACA,YAAM,WAAS;UACb,SAAS;UACT;UACA,MAAM;UACN,QAAQ;UACR,QAAM;;AAGR,YAAI,CAAC,MAAM,IAAI,QAAQ,QAAQ,QAAM,GAAG;AACtC,oBAAU,IAAI,QAAQ,SAAS,QAAM;;;AAIzC,UAAI,YAAY,WAAW,cAAc,SAAS;AAChD,QAAA,OAAA,YAAY,aAAO,QAAA,QAAA,SAAA,SAAA,IAAA,KAAnB,aAAsB,KAAK;AAC3B,QAAA,MAAA,eAAe,aAAO,QAAA,OAAA,SAAA,SAAA,GAAA,KAAtB,gBAAyB,KAAK;AAE9B,eAAO,EAAE,MAAM,QAAQ,QAAQ,MAAK;;AAGtC,YAAM;IACR,CAAC;EACH,GAAG,CAAA,CAAE;AAEL,MAAM,QAAQ,+BAAY,WAAA;AACxB,cAAU,EAAE,QAAQ,OAAO,SAAS,OAAO,OAAM,CAAE;EACrD,GAAG,CAAA,CAAE;AAEL,+BAAU,WAAA;AAAM,WAAA,WAAA;AACd,UAAI,QAAQ,YAAY;IAC1B;EAFgB,GAEb,CAAA,CAAE;AAEL,SAAO,CAAC,UAAO,SAAA,EAAI,MAAK,GAAK,MAAM,CAAA;AACrC;;;AC/IA,oBAA4C;AAatC,yBACJ,cACA,SAAoD;AAEpD,MAAM,SAAS,gBAAgB,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,MAAM;AAC9C,qBAAmB,cAAc,aAAa,YAAY;AACpD,MAAA,KAAsB,4BAAoC;IAC9D,SAAS,CAAC,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS;IACnB,OAAO;IACP,MAAM;IACN,WAAW,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;GACrB,GALM,SAAM,GAAA,IAAE,YAAS,GAAA;AAOlB,MAAA,KAA8B,4BAAS,WAAA;AAC3C,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,MAAM;AACjB,aAAO;;AAGT,WAAO,OAAO,UAAU;MACtB,OAAO;MACP,WAAW,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;MACpB,aAAa,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;MACtB,SAAS,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;KACnB;EACH,CAAC,GAXM,aAAU,GAAA,IAAE,gBAAa,GAAA;AAahC,MAAM,MAAM,0BAAO,EAAE,QAAQ,cAAc,QAAO,CAAE;AACpD,+BAAU,WAAA;;AACR,QAAI,oBAAoB,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AACjC,QAAI,OAAO,sBAAsB,YAAY;AAC3C,0BAAoB,CAAC,CAAC,kBAAkB,OAAQ;;AAGlD,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,MAAM;AACjB,UAAI,CAAC,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,UAAS,CAAC,QAAA,IAAI,QAAQ,aAAO,QAAA,QAAA,SAAA,SAAA,IAAE,OAAM;AACjD,kBAAU;UACR,SAAS;UACT,MAAM;UACN,OAAO;UACP,WAAW,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;SACrB;AACD,sBAAc,IAAI;;eAGpB,sBAAsB,SACpB,YAAW,IAAI,QAAQ,UACvB,iBAAiB,IAAI,QAAQ,gBAC7B,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,iBAAgB,QAAA,IAAI,QAAQ,aAAO,QAAA,QAAA,SAAA,SAAA,IAAE,gBAC9C,CAAC,aAAO,QAAP,YAAO,SAAA,SAAP,QAAS,UAAS,CAAC,OAAA,IAAI,QAAQ,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,SACzC,CAAC,MAAM,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,WAAW,MAAA,IAAI,QAAQ,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,SAAS,IAE3D;AACA,gBAAU;QACR,SAAS;QACT,MAAM;QACN,OAAO;QACP,WAAW,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;OACrB;AACD,oBAAc,OAAO,UAAU;QAC7B,OAAO;QACP,WAAW,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;QACpB,aAAa,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;QACtB,SAAS,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;OACnB,CAAC;;AAGJ,WAAO,OAAO,IAAI,SAAS,EAAE,QAAQ,cAAc,QAAO,CAAE;EAC9D,GAAG,CAAC,QAAQ,cAAc,OAAO,CAAC;AAElC,+BAAU,WAAA;AACR,QAAI,CAAC,YAAY;AACf;;AAGF,QAAM,gBAAe,WAAW,UAAU;MACxC,MAAA,SAAK,aAAW;;AACd,YAAM,UAAS;UACb,SAAS;UAGT,MAAM,YAAY;UAClB,OAAO;UACP,WAAW,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;;AAEtB,kBAAU,OAAM;AAEhB,QAAA,OAAA,OAAA,IAAI,QAAQ,aAAO,QAAA,QAAA,SAAA,SAAA,IAAE,wBAAkB,QAAA,QAAA,SAAA,SAAA,IAAA,KAAA,KAAG;UACxC;UACA,kBAAkB;SACnB;MACH;MACA,OAAK,SAAC,OAAK;AACT,kBAAU;UACR,SAAS;UACT,MAAM;UACN;UACA,WAAW,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;SACrB;MACH;MACA,UAAQ,WAAA;;AACN,QAAA,OAAA,OAAA,IAAI,QAAQ,aAAO,QAAA,QAAA,SAAA,SAAA,IAAE,4BAAsB,QAAA,QAAA,SAAA,SAAA,IAAA,KAAA,GAAA;MAC7C;KACD;AAED,WAAO,WAAA;AACL,oBAAa,YAAW;IAC1B;EACF,GAAG,CAAC,UAAU,CAAC;AAEf,SAAO;AACT;;;AC5HA,oBAAoC;AAG9B,wBAA4B,IAAkB;AAClD,MAAM,QAAQ,GAAE;AAIhB,MAAM,WAAW,4BAAS,KAAK,EAAE;AAKjC,+BAAU,WAAA;AACR,QAAM,oBAAoB,GAAE;AAC5B,QAAI,UAAU,mBAAmB;AAG/B,eAAS,iBAAiB;WACrB;AACL,aAAO,GAAG,aAAa,QAAQ;;EAEnC,GAAG,CAAC,KAAK,CAAC;AAEV,SAAO;AACT;",
  "names": []
}
